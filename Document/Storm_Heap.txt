// VirtualAlloc 一大块内存，再 VirtualAlloc(..., MEM_COMMIT, ...) 一部分，初始化堆的一些字段，比如 size, capacity, pointer offset, ...
//偏移值:2A350
_DWORD *__fastcall StormHeap_Create(char *a1, int a2, int a3, size_t Size, int a5, SIZE_T a6, SIZE_T dwSize)
{
  _DWORD *result; // eax
  _DWORD *v9; // eax
  _DWORD *v10; // esi
  char *v11; // eax
  char *v12; // ecx
  _DWORD *v13; // edi
  int v14; // edx
  int v15; // eax
  _DWORD *v16; // ecx
  int ArgLista; // [esp+Ch] [ebp-4h]

  if ( Size == (unsigned __int8)a3 )
  {
    v9 = VirtualAlloc(0, dwSize, 0x2000u, 1u);
    v10 = v9;
    if ( !v9 )
    {
      g_AllocErrorFlag = 1;
      Storm_AllocErrorHandler(8u, a1, a2, 0, 0, 1u);
      ExitProcess(1u);
    }
    if ( !VirtualAlloc(v9, a6, 0x1000u, 4u) )
    {
      g_AllocErrorFlag = 1;
      Storm_AllocErrorHandler(8u, a1, a2, 0, 0, 1u);
      ExitProcess(1u);
    }
    if ( a1 )
      v11 = Storm_506(a1);
    else
      v11 = 0;
    v12 = v11 + 112;
    if ( (((_BYTE)v11 + 112) & 7) != 0 )
      v12 += 8 - (((_BYTE)v11 + 112) & 7);
    v10[1] = a3;
    v10[7] = (char *)v10 + (_DWORD)v12;
    v10[8] = (char *)v10 + (_DWORD)v12;
    v10[10] = a5;
    v10[11] = a6;
    v10[12] = dwSize;
    v10[2] = Size;
    v10[4] = 1;
    v10[9] = 0;
    v10[26] = a2;
    v10[17] = 0;
    v10[18] = 0;
    v10[19] = 0;
    v10[20] = 0;
    v10[21] = 0;
    v10[22] = 0;
    v10[23] = 0;
    v10[24] = 0;
    v10[25] = 0;
    if ( a1 )
      memcpy(v10 + 27, a1, (size_t)(v11 + 1));
    else
      *((_BYTE *)v10 + 108) = 0;
    LOWORD(ArgLista) = HIWORD(v10);
    HIWORD(ArgLista) = 28525;
    v10[3] = ArgLista;
    v13 = (_DWORD *)g_HeapHashTable[Size];
    if ( !v13 )
      goto LABEL_22;
    v14 = v10[1];
    if ( v13[1] == v14 )
      goto LABEL_22;
    v15 = g_HeapHashTable[Size];
    if ( !*v13 )
      goto LABEL_22;
    do
    {
      v16 = *(_DWORD **)v15;
      if ( *(_DWORD *)(*(_DWORD *)v15 + 4) == v14 )
        break;
      v15 = *(_DWORD *)v15;
    }
    while ( *v16 );
    if ( *(_DWORD *)v15 )
    {
      *v10 = *(_DWORD *)v15;
      *(_DWORD *)v15 = v10;
      return v10;
    }
    else
    {
LABEL_22:
      *v10 = v13;
      result = v10;
      g_HeapHashTable[Size] = (int)v10;
    }
  }
  else
  {
    Storm_SetLastError(0x57u);
    return 0;
  }
  return result;
}
:1502A350 55                            push    ebp
.text:1502A351 8B EC                         mov     ebp, esp
.text:1502A353 83 EC 08                      sub     esp, 8
.text:1502A356 8B 45 08                      mov     eax, [ebp+arg_0]
.text:1502A359 53                            push    ebx
.text:1502A35A 8B 5D 0C                      mov     ebx, [ebp+Size]
.text:1502A35D 0F B6 C0                      movzx   eax, al
.text:1502A360 89 55 FC                      mov     dword ptr [ebp+ArgList], edx
.text:1502A363 57                            push    edi
.text:1502A364 8B F9                         mov     edi, ecx
.text:1502A366 3B D8                         cmp     ebx, eax
.text:1502A368 74 11                         jz      short loc_1502A37B
.text:1502A368
.text:1502A36A 6A 57                         push    57h ; 'W'
.text:1502A36C E8 FF 33 FF FF                call    Storm_SetLastError
.text:1502A36C
.text:1502A371 5F                            pop     edi
.text:1502A372 33 C0                         xor     eax, eax
.text:1502A374 5B                            pop     ebx
.text:1502A375 8B E5                         mov     esp, ebp
.text:1502A377 5D                            pop     ebp
.text:1502A378 C2 14 00                      retn    14h
.text:1502A378
.text:1502A37B                               ; ---------------------------------------------------------------------------
.text:1502A37B
.text:1502A37B                               loc_1502A37B:                           ; CODE XREF: StormHeap_Create+18↑j
.text:1502A37B 56                            push    esi
.text:1502A37C 6A 01                         push    1                               ; flProtect
.text:1502A37E 68 00 20 00 00                push    2000h                           ; flAllocationType
.text:1502A383 FF 75 18                      push    [ebp+dwSize]                    ; dwSize
.text:1502A386 6A 00                         push    0                               ; lpAddress
.text:1502A388 FF 15 E0 10 04 15             call    ds:VirtualAlloc
.text:1502A388
.text:1502A38E 8B F0                         mov     esi, eax
.text:1502A390 85 F6                         test    esi, esi
.text:1502A392 75 22                         jnz     short loc_1502A3B6
.text:1502A392
.text:1502A394 6A 01                         push    1                               ; uExitCode
.text:1502A396 50                            push    eax                             ; a5
.text:1502A397 50                            push    eax                             ; a4
.text:1502A398 8B 45 FC                      mov     eax, dword ptr [ebp+ArgList]
.text:1502A39B 50                            push    eax                             ; ArgList
.text:1502A39C 57                            push    edi                             ; a2
.text:1502A39D 6A 08                         push    8                               ; dwMessageId
.text:1502A39F C7 05 68 53 05 15 01 00 00 00 mov     g_AllocErrorFlag, 1
.text:1502A3A9 E8 E2 23 FF FF                call    Storm_AllocErrorHandler
.text:1502A3A9
.text:1502A3AE 6A 01                         push    1                               ; uExitCode
.text:1502A3B0 FF 15 A0 11 04 15             call    ds:ExitProcess
.text:1502A3B0
.text:1502A3B6                               ; ---------------------------------------------------------------------------
.text:1502A3B6
.text:1502A3B6                               loc_1502A3B6:                           ; CODE XREF: StormHeap_Create+42↑j
.text:1502A3B6 6A 04                         push    4                               ; flProtect
.text:1502A3B8 68 00 10 00 00                push    1000h                           ; flAllocationType
.text:1502A3BD FF 75 14                      push    [ebp+arg_C]                     ; dwSize
.text:1502A3C0 56                            push    esi                             ; lpAddress
.text:1502A3C1 FF 15 E0 10 04 15             call    ds:VirtualAlloc
.text:1502A3C1
.text:1502A3C7 85 C0                         test    eax, eax
.text:1502A3C9 75 22                         jnz     short loc_1502A3ED
.text:1502A3C9
.text:1502A3CB 6A 01                         push    1                               ; uExitCode
.text:1502A3CD 50                            push    eax                             ; a5
.text:1502A3CE 50                            push    eax                             ; a4
.text:1502A3CF 8B 45 FC                      mov     eax, dword ptr [ebp+ArgList]
.text:1502A3D2 50                            push    eax                             ; ArgList
.text:1502A3D3 57                            push    edi                             ; a2
.text:1502A3D4 6A 08                         push    8                               ; dwMessageId
.text:1502A3D6 C7 05 68 53 05 15 01 00 00 00 mov     g_AllocErrorFlag, 1
.text:1502A3E0 E8 AB 23 FF FF                call    Storm_AllocErrorHandler
.text:1502A3E0
.text:1502A3E5 6A 01                         push    1                               ; uExitCode
.text:1502A3E7 FF 15 A0 11 04 15             call    ds:ExitProcess
.text:1502A3E7
.text:1502A3ED                               ; ---------------------------------------------------------------------------
.text:1502A3ED
.text:1502A3ED                               loc_1502A3ED:                           ; CODE XREF: StormHeap_Create+79↑j
.text:1502A3ED 85 FF                         test    edi, edi
.text:1502A3EF 74 08                         jz      short loc_1502A3F9
.text:1502A3EF
.text:1502A3F1 57                            push    edi
.text:1502A3F2 E8 59 07 01 00                call    Storm_506
.text:1502A3F2
.text:1502A3F7 EB 02                         jmp     short loc_1502A3FB
.text:1502A3F7
.text:1502A3F9                               ; ---------------------------------------------------------------------------
.text:1502A3F9
.text:1502A3F9                               loc_1502A3F9:                           ; CODE XREF: StormHeap_Create+9F↑j
.text:1502A3F9 33 C0                         xor     eax, eax
.text:1502A3F9
.text:1502A3FB
.text:1502A3FB                               loc_1502A3FB:                           ; CODE XREF: StormHeap_Create+A7↑j
.text:1502A3FB 40                            inc     eax
.text:1502A3FC 89 45 0C                      mov     [ebp+Size], eax
.text:1502A3FF 8D 48 6F                      lea     ecx, [eax+6Fh]
.text:1502A402 8B D1                         mov     edx, ecx
.text:1502A404 83 E2 07                      and     edx, 7
.text:1502A407 74 09                         jz      short loc_1502A412
.text:1502A407
.text:1502A409 B8 08 00 00 00                mov     eax, 8
.text:1502A40E 2B C2                         sub     eax, edx
.text:1502A410 03 C8                         add     ecx, eax
.text:1502A410
.text:1502A412
.text:1502A412                               loc_1502A412:                           ; CODE XREF: StormHeap_Create+B7↑j
.text:1502A412 8B 45 08                      mov     eax, [ebp+arg_0]
.text:1502A415 89 46 04                      mov     [esi+4], eax
.text:1502A418 8D 04 31                      lea     eax, [ecx+esi]
.text:1502A41B 89 46 1C                      mov     [esi+1Ch], eax
.text:1502A41E 89 46 20                      mov     [esi+20h], eax
.text:1502A421 8B 45 10                      mov     eax, [ebp+arg_8]
.text:1502A424 89 46 28                      mov     [esi+28h], eax
.text:1502A427 8B 45 14                      mov     eax, [ebp+arg_C]
.text:1502A42A 89 46 2C                      mov     [esi+2Ch], eax
.text:1502A42D 8B 45 18                      mov     eax, [ebp+dwSize]
.text:1502A430 89 46 30                      mov     [esi+30h], eax
.text:1502A433 8B 45 FC                      mov     eax, dword ptr [ebp+ArgList]
.text:1502A436 89 5E 08                      mov     [esi+8], ebx
.text:1502A439 C7 46 10 01 00 00 00          mov     dword ptr [esi+10h], 1
.text:1502A440 C7 46 24 00 00 00 00          mov     dword ptr [esi+24h], 0
.text:1502A447 89 46 68                      mov     [esi+68h], eax
.text:1502A44A C7 46 44 00 00 00 00          mov     dword ptr [esi+44h], 0
.text:1502A451 C7 46 48 00 00 00 00          mov     dword ptr [esi+48h], 0
.text:1502A458 C7 46 4C 00 00 00 00          mov     dword ptr [esi+4Ch], 0
.text:1502A45F C7 46 50 00 00 00 00          mov     dword ptr [esi+50h], 0
.text:1502A466 C7 46 54 00 00 00 00          mov     dword ptr [esi+54h], 0
.text:1502A46D C7 46 58 00 00 00 00          mov     dword ptr [esi+58h], 0
.text:1502A474 C7 46 5C 00 00 00 00          mov     dword ptr [esi+5Ch], 0
.text:1502A47B C7 46 60 00 00 00 00          mov     dword ptr [esi+60h], 0
.text:1502A482 C7 46 64 00 00 00 00          mov     dword ptr [esi+64h], 0
.text:1502A489 85 FF                         test    edi, edi
.text:1502A48B 74 12                         jz      short loc_1502A49F
.text:1502A48B
.text:1502A48D FF 75 0C                      push    [ebp+Size]                      ; Size
.text:1502A490 8D 46 6C                      lea     eax, [esi+6Ch]
.text:1502A493 57                            push    edi                             ; Src
.text:1502A494 50                            push    eax                             ; void *
.text:1502A495 E8 66 4D 01 00                call    memcpy
.text:1502A495
.text:1502A49A 83 C4 0C                      add     esp, 0Ch
.text:1502A49D EB 04                         jmp     short loc_1502A4A3
.text:1502A49D
.text:1502A49F                               ; ---------------------------------------------------------------------------
.text:1502A49F
.text:1502A49F                               loc_1502A49F:                           ; CODE XREF: StormHeap_Create+13B↑j
.text:1502A49F C6 46 6C 00                   mov     byte ptr [esi+6Ch], 0
.text:1502A49F
.text:1502A4A3
.text:1502A4A3                               loc_1502A4A3:                           ; CODE XREF: StormHeap_Create+14D↑j
.text:1502A4A3 8B C6                         mov     eax, esi
.text:1502A4A5 C1 E8 10                      shr     eax, 10h
.text:1502A4A8 66 89 45 FC                   mov     word ptr [ebp+ArgList], ax
.text:1502A4AC B8 6D 6F 00 00                mov     eax, 6F6Dh
.text:1502A4B1 66 89 45 FE                   mov     word ptr [ebp+ArgList+2], ax
.text:1502A4B5 8B 45 FC                      mov     eax, dword ptr [ebp+ArgList]
.text:1502A4B8 89 46 0C                      mov     [esi+0Ch], eax
.text:1502A4BB 8B 3C 9D 80 6F 05 15          mov     edi, g_HeapHashTable[ebx*4]
.text:1502A4C2 85 FF                         test    edi, edi
.text:1502A4C4 74 32                         jz      short loc_1502A4F8
.text:1502A4C4
.text:1502A4C6 8B 56 04                      mov     edx, [esi+4]
.text:1502A4C9 39 57 04                      cmp     [edi+4], edx
.text:1502A4CC 74 2A                         jz      short loc_1502A4F8
.text:1502A4CC
.text:1502A4CE 8B C7                         mov     eax, edi
.text:1502A4D0 83 38 00                      cmp     dword ptr [eax], 0
.text:1502A4D3 74 23                         jz      short loc_1502A4F8
.text:1502A4D3
.text:1502A4D5
.text:1502A4D5                               loc_1502A4D5:                           ; CODE XREF: StormHeap_Create+191↓j
.text:1502A4D5 8B 08                         mov     ecx, [eax]
.text:1502A4D7 39 51 04                      cmp     [ecx+4], edx
.text:1502A4DA 74 07                         jz      short loc_1502A4E3
.text:1502A4DA
.text:1502A4DC 8B C1                         mov     eax, ecx
.text:1502A4DE 83 38 00                      cmp     dword ptr [eax], 0
.text:1502A4E1 75 F2                         jnz     short loc_1502A4D5
.text:1502A4E1
.text:1502A4E3
.text:1502A4E3                               loc_1502A4E3:                           ; CODE XREF: StormHeap_Create+18A↑j
.text:1502A4E3 8B 08                         mov     ecx, [eax]
.text:1502A4E5 85 C9                         test    ecx, ecx
.text:1502A4E7 74 0F                         jz      short loc_1502A4F8
.text:1502A4E7
.text:1502A4E9 89 0E                         mov     [esi], ecx
.text:1502A4EB 89 30                         mov     [eax], esi
.text:1502A4ED 8B C6                         mov     eax, esi
.text:1502A4EF 5E                            pop     esi
.text:1502A4F0 5F                            pop     edi
.text:1502A4F1 5B                            pop     ebx
.text:1502A4F2 8B E5                         mov     esp, ebp
.text:1502A4F4 5D                            pop     ebp
.text:1502A4F5 C2 14 00                      retn    14h
.text:1502A4F5
.text:1502A4F8                               ; ---------------------------------------------------------------------------
.text:1502A4F8
.text:1502A4F8                               loc_1502A4F8:                           ; CODE XREF: StormHeap_Create+174↑j
.text:1502A4F8                                                                       ; StormHeap_Create+17C↑j
.text:1502A4F8                                                                       ; StormHeap_Create+183↑j
.text:1502A4F8                                                                       ; StormHeap_Create+197↑j
.text:1502A4F8 89 3E                         mov     [esi], edi
.text:1502A4FA 8B C6                         mov     eax, esi
.text:1502A4FC 89 34 9D 80 6F 05 15          mov     g_HeapHashTable[ebx*4], esi
.text:1502A503 5E                            pop     esi
.text:1502A504 5F                            pop     edi
.text:1502A505 5B                            pop     ebx
.text:1502A506 8B E5                         mov     esp, ebp
.text:1502A508 5D                            pop     ebp
.text:1502A509 C2 14 00                      retn    14h
.text:1502A509
.text:1502A509                               StormHeap_Create endp
// 这是在 StormHeapAlloc_2B3B0 里被调用的一个重要子函数，做了很多对 VirtualAlloc 或“对齐、保护页”等操作。
// 看逻辑，是在申请一块更大的物理页/地址空间，然后存储到 (v20 + 2) = ...。
//偏移值：2B3B0
unsigned __int16 *__fastcall StormHeap_AllocPage(char *a1, unsigned int a2, LPVOID lpAddress)
{
  BOOL v4; // eax
  BOOL v5; // ebx
  unsigned int v6; // ecx
  int v7; // eax
  int v8; // ebx
  unsigned int v9; // eax
  unsigned int v10; // edi
  bool v11; // zf
  char *v12; // ecx
  unsigned int v13; // edx
  char *v14; // eax
  unsigned __int16 *v15; // ebx
  unsigned __int16 *v16; // eax
  unsigned int v17; // edx
  unsigned int v18; // eax
  int v19; // ebx
  unsigned __int16 *v20; // edi
  unsigned int v21; // ebx
  int v22; // ecx
  char *v23; // eax
  char *v24; // ecx
  SIZE_T v25; // ecx
  unsigned int v26; // edx
  char *v27; // eax
  int v28; // edx
  int v29; // edx
  int v30; // eax
  char v31; // bl
  DWORD v32; // ecx
  int v33; // ebx
  int v34; // edx
  DWORD v35; // ebx
  LPVOID v36; // eax
  char *v37; // eax
  unsigned __int16 *result; // eax
  unsigned int v39; // edx
  char *v40; // ecx
  struct _SYSTEM_INFO SystemInfo; // [esp+Ch] [ebp-48h] BYREF
  DWORD v42; // [esp+30h] [ebp-24h]
  int v43; // [esp+34h] [ebp-20h]
  int v44; // [esp+38h] [ebp-1Ch]
  char *v45; // [esp+3Ch] [ebp-18h] BYREF
  unsigned int v46; // [esp+40h] [ebp-14h] BYREF
  char *v47; // [esp+44h] [ebp-10h]
  unsigned int v48; // [esp+48h] [ebp-Ch]
  unsigned int v49; // [esp+4Ch] [ebp-8h]
  unsigned int v50; // [esp+50h] [ebp-4h]
  void *lpAddressa; // [esp+5Ch] [ebp+8h]

  v49 = a2;
  v4 = dword_15056F74 || a2 > 0xFE7B;
  v44 = v4;
  v5 = dword_1505536C && !v4;
  v43 = v5;
  v6 = a2;
  if ( v4 )
    v6 = 4;
  v7 = v5 ? 2 : 0;
  v8 = 8;
  v9 = v6 + 8 + v7;
  v10 = v9 + (-v9 & 7);
  v42 = v10;
  v45 = (char *)v10;
  v50 = -v9 & 7;
  v46 = v50;
  if ( v10 >> 5 < 8 )
    v8 = v10 >> 5;
  if ( *((_DWORD *)a1 + 9) >= 4u && !*(_DWORD *)&a1[4 * v8 + 68] )
    StormHeap_RebuildFreeList(a1);
  v48 = 0x7FFFFFFF;
  v11 = *(_DWORD *)&a1[4 * v8 + 68] == 0;
  v12 = &a1[4 * v8 + 68];
  v47 = 0;
  if ( v11 )
  {
    v13 = v8 + 1;
    v14 = &a1[4 * v8 + 68];
    do
    {
      if ( v13 >= 9 )
        break;
      v14 += 4;
      ++v13;
      v12 = v14;
    }
    while ( !*(_DWORD *)v14 );
  }
  v15 = *(unsigned __int16 **)v12;
  v16 = *(unsigned __int16 **)v12;
  if ( *(_DWORD *)v12 )
  {
    v17 = 16;
    do
    {
      v18 = *v16 - v10;
      if ( v18 < v48 )
      {
        v48 = v18;
        v47 = v12;
        if ( v18 < v17 )
          break;
        v17 += 4;
      }
      v12 = (char *)(v15 + 2);
      v15 = (unsigned __int16 *)*((_DWORD *)v15 + 1);
      v16 = v15;
    }
    while ( v15 );
  }
  v19 = 0;
  if ( v47 )
  {
    v20 = *(unsigned __int16 **)v47;
    v21 = *(unsigned __int8 *)(*(_DWORD *)v47 + 3);
    *(_DWORD *)v47 = *(_DWORD *)(*(_DWORD *)v47 + 4);
    v22 = *((_DWORD *)a1 + 9);
    v23 = (char *)v20 + *v20;
    v19 = (v21 >> 4) & 1;
    if ( v22 && (v19 || v23 != *((char **)a1 + 8) && (v23[3] & 2) != 0) )
      *((_DWORD *)a1 + 9) = v22 - 1;
    StormHeap_CombineFreeBlocks((int)a1, v20, (int *)&v45, (char *)&v46);
    v24 = v45;
    v50 = v46;
  }
  else
  {
    v25 = *((_DWORD *)a1 + 12);
    v26 = v10 + *((_DWORD *)a1 + 8) - (_DWORD)a1;
    v45 = a1 + 32;
    if ( v26 > v25 )
    {
      if ( v25 < 0x10000000 )
        v25 *= 2;
      v27 = (char *)StormHeap_Create(
                      a1 + 108,
                      *((_DWORD *)a1 + 26),
                      *((_DWORD *)a1 + 1),
                      *((_DWORD *)a1 + 2),
                      v25 >> 3,
                      v25 >> 3,
                      v25);
      if ( !v27 )
        return 0;
      *((_DWORD *)a1 + 4) = 0;
      a1 = v27;
      v28 = *((_DWORD *)v27 + 8) - (_DWORD)v27;
      v45 = v27 + 32;
      v26 = v10 + v28;
    }
    if ( v26 > *((_DWORD *)a1 + 11) && !StormHeap_CommitPages(a1, v26) )
      return 0;
    v24 = (char *)v42;
    v20 = *(unsigned __int16 **)v45;
    *(_DWORD *)v45 += v42;
  }
  ++*((_DWORD *)a1 + 5);
  *((_DWORD *)a1 + 6) += v49;
  v29 = v44;
  v30 = v44;
  *v20 = (unsigned __int16)v24;
  v31 = (unsigned __int8)lpAddress | (v43 != 0) | (v30 != 0 ? 4 : 0) | (v19 != 0 ? 0x10 : 0);
  *((_BYTE *)v20 + 2) = v50;
  *((_BYTE *)v20 + 3) = v31;
  *((_DWORD *)v20 + 1) = *((_DWORD *)a1 + 3);
  if ( (v31 & 1) != 0 )
    *(_WORD *)&v24[(_DWORD)v20 - v50 - 2] = 4785;
  if ( !v29 )
    return v20 + 4;
  v32 = g_VirtualMemoryPageSize;
  *((_DWORD *)v20 + 2) = 0;
  if ( !v32 )
  {
    GetSystemInfo(&SystemInfo);
    v32 = 1;
    g_VirtualMemoryPageSize = 1;
    if ( SystemInfo.dwPageSize > 1 )
    {
      do
        v32 *= 2;
      while ( v32 < SystemInfo.dwPageSize );
      g_VirtualMemoryPageSize = v32;
    }
  }
  v33 = 0;
  v34 = v49 + 16;
  lpAddressa = 0;
  v43 = v49 + 16;
  if ( dword_1505536C || dword_15056F74 )
  {
    v42 = v32 - 1;
    v35 = v32 - (v34 & (v32 - 1));
    if ( dword_15056F74 )
    {
      v33 = v42 & v35;
      v36 = VirtualAlloc(0, v33 + v49 + 20, 0x2000u, 1u);
      v34 = v43;
      lpAddressa = v36;
    }
    else
    {
      v33 = (v32 - 4) & v35;
    }
  }
  v37 = (char *)VirtualAlloc(lpAddressa, v33 + v34, 0x1000u, 4u);
  if ( !v37 )
  {
    StormHeap_InternalFree(a1, v20);
    return 0;
  }
  v39 = v49;
  v40 = &v37[v33];
  *((_DWORD *)v40 + 1) = v20;
  *(_DWORD *)v40 = v39;
  *((_WORD *)v40 + 4) = (v39 + 0xFFFF) >> 16;
  *((_WORD *)v40 + 5) = 3072;
  *((_DWORD *)v40 + 3) = *((_DWORD *)a1 + 3);
  result = (unsigned __int16 *)&v37[v33 + 16];
  *((_DWORD *)v20 + 2) = v40 + 16;
  *((_DWORD *)a1 + 13) += v39;
  return result;
}
// 叫了 v1 = a1[7], v2 == a1[8] 之类循环，把空闲块重新链接到 a1[v13+17]。看上去是“扫描并重建空闲链表”。
// 偏移值:2A920
_DWORD *__fastcall StormHeap_RebuildFreeList(_DWORD *a1)
{
  unsigned __int16 *v1; // esi
  unsigned __int16 *v2; // eax
  int v3; // ebx
  unsigned int v4; // edx
  int v5; // ebx
  unsigned __int16 v6; // cx
  unsigned int v7; // edx
  int v8; // ecx
  int *v9; // edx
  _DWORD *result; // eax
  _DWORD *v11; // [esp+4h] [ebp-2Ch]
  _DWORD *v12; // [esp+8h] [ebp-28h] BYREF
  _DWORD *v13; // [esp+Ch] [ebp-24h]
  _DWORD *v14; // [esp+10h] [ebp-20h]
  _DWORD *v15; // [esp+14h] [ebp-1Ch]
  _DWORD *v16; // [esp+18h] [ebp-18h]
  _DWORD *v17; // [esp+1Ch] [ebp-14h]
  _DWORD *v18; // [esp+20h] [ebp-10h]
  _DWORD *v19; // [esp+24h] [ebp-Ch]
  _DWORD *v20; // [esp+28h] [ebp-8h]

  v11 = a1;
  v12 = a1 + 17;
  v13 = a1 + 18;
  v14 = a1 + 19;
  v15 = a1 + 20;
  v16 = a1 + 21;
  v17 = a1 + 22;
  v18 = a1 + 23;
  v19 = a1 + 24;
  v20 = a1 + 25;
  v1 = 0;
  v2 = (unsigned __int16 *)a1[7];
  if ( v2 == (unsigned __int16 *)a1[8] )
    goto LABEL_18;
  v3 = 8;
  do
  {
    if ( (*((_BYTE *)v2 + 3) & 2) == 0 )
      goto LABEL_13;
    *((_DWORD *)v2 + 1) = 0;
    if ( v1 )
    {
      v4 = *v1;
      if ( v2 == (unsigned __int16 *)((char *)v1 + v4) )
      {
        v5 = *v2;
        if ( v4 + v5 <= 0xFFFF )
        {
          v6 = v5 + *v1;
          v3 = 8;
          *v1 = v6;
          goto LABEL_13;
        }
        v3 = 8;
      }
      v7 = v4 >> 5;
      v8 = 8;
      if ( v7 < 8 )
        v8 = v7;
      v9 = (int *)&(&v12)[v8];
      *(_DWORD *)*v9 = v1;
      *v9 = (int)(v1 + 2);
    }
    v1 = v2;
LABEL_13:
    v2 = (unsigned __int16 *)((char *)v2 + *v2);
    a1 = v11;
  }
  while ( v2 != (unsigned __int16 *)v11[8] );
  if ( v1 )
  {
    if ( *v1 >> 5 < 8u )
      v3 = *v1 >> 5;
    *(&v12)[v3] = v1;
    (&v12)[v3] = v1 + 2;
  }
LABEL_18:
  *v12 = 0;
  *v13 = 0;
  *v14 = 0;
  *v15 = 0;
  *v16 = 0;
  *v17 = 0;
  *v18 = 0;
  *v19 = 0;
  result = v20;
  *v20 = 0;
  a1[9] = 0;
  return result;
}
// 也是在处理内存块合并之类：v10[3] &= ~0x10; ...
// 偏移值:2B790
char *__fastcall StormHeap_CombineFreeBlocks(int a1, unsigned __int16 *a2, int *a3, char *a4)
{
  int v4; // esi
  char *v6; // eax
  int v7; // ecx
  unsigned int v8; // esi
  char *result; // eax
  char *v10; // edx
  int v11; // ecx

  v4 = *a2;
  v6 = (char *)a2 + v4;
  v7 = *a3;
  v8 = v4 - *a3;
  if ( v6 == *(char **)(a1 + 32) )
  {
    result = (char *)a2 + v7;
    *(_DWORD *)(a1 + 32) = (char *)a2 + v7;
  }
  else if ( v8 < 0x10 )
  {
    v6[3] &= ~0x10u;
    result = a4;
    *a3 += v8;
    *(_DWORD *)a4 += v8;
  }
  else
  {
    v10 = (char *)a2 + v7;
    v11 = 8;
    if ( (unsigned __int16)v8 >> 5 < 8u )
      v11 = (unsigned __int16)v8 >> 5;
    *(_WORD *)v10 = v8;
    *((_WORD *)v10 + 1) = 512;
    result = *(char **)(a1 + 4 * v11 + 68);
    *((_DWORD *)v10 + 1) = result;
    *(_DWORD *)(a1 + 4 * v11 + 68) = v10;
  }
  return result;
}
// 里头 VirtualAlloc((char *)a1 + v4, v5, MEM_COMMIT, PAGE_READWRITE) 之类，给堆追加 commit 页面。
// 偏移值:2ADE0
int __fastcall StormHeap_CommitPages(_DWORD *a1, int a2)
{
  int v3; // eax
  int v4; // ecx
  SIZE_T v5; // esi
  int v6; // edx
  unsigned int v7; // edx
  int result; // eax

  v3 = a1[10];
  v4 = a1[11];
  v5 = a2 - v4;
  v6 = (a2 - v4) & (v3 - 1);
  if ( v6 )
    v5 += v3 - v6;
  v7 = a1[12];
  if ( v4 + v5 > v7 )
    v5 = v7 - v4;
  result = (int)VirtualAlloc((char *)a1 + v4, v5, 0x1000u, 4u);
  if ( result )
  {
    a1[11] += v5;
    return 1;
  }
  return result;
}
// 这里把 size_t v3; = block size，dword_1505738C -= *a3, ++a1[15]，然后最后 sub_1502ABF0(a1, a3).
// 偏移值:2ABF0
char __fastcall StormHeap_InternalFree(_DWORD *a1, unsigned __int16 *a2)
{
  char v4; // cl
  int v5; // ecx
  int *v6; // ecx
  int v7; // ebx
  void *v8; // eax
  int v9; // eax
  int v10; // edx
  int v11; // eax
  char *v12; // edx
  int v13; // ecx
  bool v14; // cf

  v4 = *((_BYTE *)a2 + 3);
  if ( (v4 & 4) != 0 )
  {
    v5 = *((_DWORD *)a2 + 2);
    if ( v5 )
    {
      v6 = (int *)(v5 - 16);
      v7 = *v6;
      v8 = (void *)((unsigned int)v6 & ~(g_VirtualMemoryPageSize - 1));
      a1[13] -= *v6;
      VirtualFree(v8, 0, 0x8000u);
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + 2);
    v7 = *a2 - v9 - 8;
    if ( (v4 & 1) != 0 )
      v7 = *a2 - v9 - 10;
  }
  --a1[5];
  a1[6] -= v7;
  v10 = *a2;
  LOBYTE(v11) = *((_BYTE *)a2 + 3) & 0x10 | 2;
  *((_BYTE *)a2 + 2) = 0;
  v12 = (char *)a2 + v10;
  *((_BYTE *)a2 + 3) = v11;
  if ( (char *)a1[8] == v12 )
  {
    *((_DWORD *)a2 + 1) = 0;
    a1[8] = a2;
  }
  else
  {
    v12[3] |= 0x10u;
    v13 = 8;
    if ( *a2 >> 5 < 8u )
      v13 = *a2 >> 5;
    v11 = a1[v13 + 17];
    *((_DWORD *)a2 + 1) = v11;
    a1[v13 + 17] = a2;
    if ( (*((_BYTE *)a2 + 3) & 0x10) != 0 || (v12[3] & 2) != 0 )
      ++a1[9];
  }
  if ( !a1[5] )
  {
    v11 = a1[7];
    a1[8] = v11;
    a1[17] = 0;
    a1[18] = 0;
    a1[19] = 0;
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
    a1[23] = 0;
    a1[24] = 0;
    a1[25] = 0;
    v14 = a1[1] < 0x80000000;
    a1[9] = 0;
    if ( v14 )
    {
      v11 = a1[2];
      g_DebugHeapPtr = (int)a1;
      g_HeapActiveFlag[v11] = 1;
    }
  }
  return v11;
}
// 会遍历所有 256 个堆，清理无效heap (VirtualFree)。
// 偏移值:2AB50
void StormHeap_CleanupAll()
{
  int v0; // ecx
  struct _RTL_CRITICAL_SECTION *v1; // ebx
  int v2; // edi
  bool v3; // zf
  int *v4; // esi
  int *v5; // eax
  int v6; // [esp+Ch] [ebp-4h]

  v0 = 256;
  g_DebugHeapPtr = 0;
  v1 = &g_HeapCriticalSections;
  v6 = 256;
  v2 = 0;
  do
  {
    if ( g_HeapActiveFlag[v2] )
    {
      EnterCriticalSection(v1);
      v3 = g_HeapHashTable[v2] == 0;
      v4 = &g_HeapHashTable[v2];
      g_HeapActiveFlag[v2] = 0;
      if ( !v3 )
      {
        do
        {
          v5 = (int *)*v4;
          if ( *(_DWORD *)(*v4 + 20) || (unsigned int)v5[1] >= 0x80000000 )
          {
            v4 = (int *)*v4;
          }
          else
          {
            *v4 = *v5;
            VirtualFree(v5, 0, 0x8000u);
          }
        }
        while ( *v4 );
      }
      LeaveCriticalSection(v1);
      v0 = v6;
    }
    ++v2;
    ++v1;
    v6 = --v0;
  }
  while ( v0 );
}
// 根据 (int*)a1 和 int a2 计算一个“堆索引”，值域应该在 1 ~ 255 之间，也会跟 Storm_502(...) 之类函数有关。
// 偏移值:2AD60
int __fastcall StormHeap_ComputeIndex(int *a1, int a2)
{
  int v4; // ebx
  int v5; // eax
  int result; // eax

  if ( a1 )
    v4 = *a1;
  else
    v4 = 0;
  if ( dword_1504955C && a1 == (int *)g_LastAllocNamePtr && a2 == g_LastAllocLine )
  {
    if ( v4 == g_LastAllocIndex )
      return g_LastAllocFlag;
    dword_1504955C = 0;
  }
  if ( a1 )
    v5 = Storm_502(a1, 1, a2);
  else
    v5 = a2;
  result = v5 & 0x7FFFFFFF;
  g_LastAllocLine = a2;
  g_LastAllocNamePtr = (int)a1;
  if ( !result )
    result = 1;
  g_LastAllocIndex = v4;
  g_LastAllocFlag = result;
  return result;
}
// 核心的“分配 size 字节”的逻辑：
// 判断 Size > 0x7FFFFFFF 就报错退出
// 如果有“清零标志(8)”就 memset(..., 0)；如果全局 dword_15056F70 不为 0，就填充 0xEE(238)；
// dword_1505738C += size; 作为全局统计
// 偏移值:2B3B0
size_t __fastcall StormHeap_Alloc(_DWORD *a1, int a2, int a3, size_t Size)
{
  size_t v4; // edi
  char v7; // al
  void *v8; // eax
  int v10; // [esp-10h] [ebp-1Ch]
  int v11; // [esp-10h] [ebp-1Ch]
  size_t Sizea; // [esp+18h] [ebp+Ch]

  v4 = Size;
  if ( Size > 0x7FFFFFFF )
  {
    if ( *a1 != -1 )
    {
      LeaveCriticalSection(&g_HeapCriticalSections + *a1);
      *a1 = -1;
    }
    v10 = *(_DWORD *)(a2 + 104);
    g_AllocErrorFlag = 1;
    Storm_AllocErrorHandler(8u, (char *)(a2 + 108), v10, 0, 0, 1u);
    ExitProcess(1u);
  }
  if ( !a2 )
    goto LABEL_16;
  v7 = 0;
  if ( (a3 & 0x4000000) != 0 )
    v7 = 64;
  LOBYTE(Size) = v7;
  if ( (a3 & 0x8000000) != 0 )
    LOBYTE(Size) = v7 | 0x80;
  v8 = (void *)StormHeap_AllocPage((LPVOID)Size);
  Sizea = (size_t)v8;
  if ( !v8 )
  {
LABEL_16:
    if ( *a1 != -1 )
    {
      LeaveCriticalSection(&g_HeapCriticalSections + *a1);
      *a1 = -1;
    }
    if ( *(_BYTE *)(a2 + 108) )
    {
      v11 = *(_DWORD *)(a2 + 104);
      g_AllocErrorFlag = 1;
      Storm_AllocErrorHandler(8u, (char *)(a2 + 108), v11, 0, 0, 1u);
      ExitProcess(1u);
    }
    g_AllocErrorFlag = 1;
    Storm_AllocErrorHandler(8u, "SMemHeapAlloc()", -1, 0, 0, 1u);
    ExitProcess(1u);
  }
  if ( (a3 & 8) != 0 )
  {
    memset(v8, 0, v4);
  }
  else if ( g_FillPatternEnabled )
  {
    memset(v8, 238, v4);
  }
  Storm_GlobalCounterInc();
  g_TotalAllocatedMemory += v4;
  ++*(_DWORD *)(a2 + 56);
  return Sizea;
}
void Storm_GlobalCounterInc()
{
  ++g_GlobalCounter;
}
//偏移值:2B560
char *__fastcall StormHeap_ReallocImpl(_DWORD *a1, _DWORD *a2, char *Src, unsigned __int16 *a4, size_t Size, char a6)
{
  _DWORD *v6; // eax
  char v7; // cl
  size_t v8; // edi
  int v9; // ecx
  char *v10; // ebx
  char v11; // dl
  size_t v13; // eax

  v6 = a2;
  v7 = *((_BYTE *)a4 + 3) & 4;
  if ( v7 )
  {
    v8 = *((_DWORD *)Src - 4);
  }
  else
  {
    v9 = *((unsigned __int8 *)a4 + 2) + 8;
    if ( (*((_BYTE *)a4 + 3) & 1) != 0 )
      v9 = *((unsigned __int8 *)a4 + 2) + 10;
    v8 = *a4 - v9;
    v7 = 0;
  }
  v10 = 0;
  if ( !dword_15056F78 && !v7 )
  {
    if ( Size >= v8 )
    {
      if ( Size <= v8 )
        goto LABEL_14;
      if ( sub_1502AE30(v8, Size) )
        v10 = Src;
    }
    else
    {
      sub_1502B680(v8, Size);
      v10 = Src;
    }
    v6 = a2;
  }
LABEL_14:
  ++v6[16];
  v11 = a6;
  if ( v10 )
  {
    g_TotalAllocatedMemory += Size - v8;
    ++a2[14];
  }
  else
  {
    if ( (a6 & 0x10) != 0 )
      return 0;
    v10 = (char *)StormHeap_Alloc(a1, (int)v6, 0, Size);
    if ( v10 && v8 && Size )
    {
      v13 = Size;
      if ( v8 < Size )
        v13 = v8;
      memcpy(v10, Src, v13);
    }
    sub_1502B4F0(a2, Src, a4);
    if ( !v10 )
      return 0;
    v11 = a6;
  }
  if ( Size > v8 )
  {
    if ( (v11 & 8) != 0 )
    {
      memset(&v10[v8], 0, Size - v8);
    }
    else if ( g_FillPatternEnabled )
    {
      memset(&v10[v8], 238, Size - v8);
    }
  }
  return v10;
}
int __fastcall sub_1502AE30(_DWORD *a1, unsigned __int16 *a2, int a3, unsigned int a4)
{
  int v6; // ecx
  BOOL v7; // eax
  BOOL v8; // edx
  unsigned int v9; // esi
  int v10; // edx
  unsigned int v11; // eax
  int v12; // eax
  int v13; // esi
  int v14; // edx
  unsigned int v15; // edx
  bool v16; // zf
  int v17; // ecx
  unsigned int v18; // esi
  unsigned __int16 *v19; // ecx
  int v20; // eax
  unsigned int v21; // ecx
  unsigned int v22; // ecx
  unsigned int v23; // edx
  int v24; // eax
  int v25; // eax
  char v26; // al
  BOOL v28; // [esp+Ch] [ebp-14h]
  int v29; // [esp+10h] [ebp-10h] BYREF
  int v30; // [esp+14h] [ebp-Ch]
  unsigned int v31; // [esp+18h] [ebp-8h] BYREF
  unsigned int v32; // [esp+1Ch] [ebp-4h]

  v6 = a4;
  v7 = dword_15056F74 || a4 > 0xFE7B;
  v32 = v7;
  v8 = dword_1505536C && !v7;
  v28 = v8;
  if ( v7 )
    v6 = 4;
  v9 = v6 + (v8 ? 10 : 8) + (-(v6 + (v8 ? 10 : 8)) & 7);
  v31 = v9;
  v10 = -(v6 + (v8 ? 10 : 8)) & 7;
  v29 = v10;
  if ( v9 > 0xFFFF || v32 )
    return 0;
  v11 = *a2;
  if ( v9 > v11 )
  {
    v15 = 0;
    v16 = v9 == v11;
    v32 = v9 - v11;
    v17 = (int)a2 + v9;
    v18 = v9 - v11;
    v30 = v17;
    v19 = (unsigned __int16 *)((char *)a2 + v11);
    if ( !v16 )
    {
      do
      {
        if ( v19 == (unsigned __int16 *)a1[8] )
          break;
        if ( (*((_BYTE *)v19 + 3) & 2) == 0 )
          return 0;
        v20 = *v19;
        v15 += v20;
        v19 = (unsigned __int16 *)((char *)v19 + v20);
      }
      while ( v15 < v18 );
      v11 = *a2;
    }
    v21 = v18;
    if ( v15 > v18 )
      v21 = v15;
    v22 = v11 + v21;
    v32 = v22;
    if ( v22 <= 0xFFFF )
    {
      if ( v15 >= v18 )
        goto LABEL_29;
      v23 = v30 - (_DWORD)a1;
      if ( (unsigned int)(v30 - (_DWORD)a1) <= a1[11] )
      {
LABEL_28:
        a1[8] = v30;
LABEL_29:
        *a2 = v22;
        StormHeap_CombineFreeBlocks((int)a1, a2, (int *)&v31, (char *)&v29);
        v13 = v31;
        v24 = v30;
        *a2 = v31;
        if ( v24 != a1[8] )
        {
          *(_BYTE *)(v24 + 3) &= ~0x10u;
          if ( (*(_BYTE *)(v24 + 3) & 2) != 0 )
          {
            v25 = a1[9];
            if ( v25 )
              a1[9] = v25 - 1;
          }
        }
        StormHeap_RebuildFreeList(a1);
        v14 = v29;
        goto LABEL_34;
      }
      if ( v23 <= a1[12] && StormHeap_CommitPages(a1, v23) )
      {
        LOWORD(v22) = v32;
        goto LABEL_28;
      }
    }
    return 0;
  }
  v12 = v11 - v9;
  v13 = v12 + v9;
  v14 = v12 + v10;
LABEL_34:
  v26 = *((_BYTE *)a2 + 3);
  *a2 = v13;
  *((_BYTE *)a2 + 2) = v14;
  *((_BYTE *)a2 + 3) = v26 & 0xFE | v28;
  *((_DWORD *)a2 + 1) = a1[3];
  if ( v28 )
    *(unsigned __int16 *)((char *)a2 + v13 - v14 - 2) = 4785;
  a1[6] += a4 - a3;
  return 1;
}
// 也是在处理内存块合并之类：v10[3] &= ~0x10; ...
// 偏移值:2B790
char *__fastcall StormHeap_CombineFreeBlocks(int a1, unsigned __int16 *a2, int *a3, char *a4)
{
  int v4; // esi
  char *v6; // eax
  int v7; // ecx
  unsigned int v8; // esi
  char *result; // eax
  char *v10; // edx
  int v11; // ecx

  v4 = *a2;
  v6 = (char *)a2 + v4;
  v7 = *a3;
  v8 = v4 - *a3;
  if ( v6 == *(char **)(a1 + 32) )
  {
    result = (char *)a2 + v7;
    *(_DWORD *)(a1 + 32) = (char *)a2 + v7;
  }
  else if ( v8 < 0x10 )
  {
    v6[3] &= ~0x10u;
    result = a4;
    *a3 += v8;
    *(_DWORD *)a4 += v8;
  }
  else
  {
    v10 = (char *)a2 + v7;
    v11 = 8;
    if ( (unsigned __int16)v8 >> 5 < 8u )
      v11 = (unsigned __int16)v8 >> 5;
    *(_WORD *)v10 = v8;
    *((_WORD *)v10 + 1) = 512;
    result = *(char **)(a1 + 4 * v11 + 68);
    *((_DWORD *)v10 + 1) = result;
    *(_DWORD *)(a1 + 4 * v11 + 68) = v10;
  }
  return result;
}
//偏移值:2B680
int __fastcall sub_1502B680(_DWORD *a1, unsigned __int16 *a2, int a3, unsigned int a4)
{
  BOOL v6; // eax
  BOOL v7; // esi
  int v8; // ecx
  int v9; // eax
  int v10; // esi
  int v11; // ecx
  int v12; // eax
  char *v13; // edx
  unsigned int v14; // eax
  bool v15; // zf
  unsigned int v16; // edx
  char *v17; // edx
  int v18; // ecx
  unsigned int v19; // eax
  int result; // eax
  int v21; // [esp+Ch] [ebp-Ch]
  BOOL v22; // [esp+10h] [ebp-8h]
  char *v23; // [esp+10h] [ebp-8h]
  char v24; // [esp+17h] [ebp-1h]

  v6 = dword_15056F74 || a4 > 0xFE7B;
  v7 = dword_1505536C && !v6;
  v22 = v7;
  v8 = a4;
  if ( v6 )
    v8 = 4;
  v9 = v8 + 8 + (v7 ? 2 : 0);
  v10 = v9 + (-v9 & 7);
  v11 = -v9 & 7;
  v21 = v11;
  v24 = *((_BYTE *)a2 + 3) & 0xFE | v22;
  v12 = *a2;
  v13 = (char *)a2 + v12;
  v14 = v12 - v10;
  v15 = v13 == (char *)a1[8];
  v23 = v13;
  v16 = a4;
  if ( v15 )
  {
    a1[8] = (char *)a2 + v10;
  }
  else
  {
    if ( v14 < 0x10 )
    {
      v10 += v14;
      v23[3] &= ~0x10u;
      v11 += v14;
    }
    else
    {
      v17 = (char *)a2 + v10;
      v18 = 8;
      *(_WORD *)v17 = v14;
      v19 = (unsigned __int16)v14 >> 5;
      *((_WORD *)v17 + 1) = 512;
      if ( v19 < 8 )
        v18 = v19;
      *((_DWORD *)v17 + 1) = a1[v18 + 17];
      a1[v18 + 17] = v17;
      v11 = v21;
    }
    v16 = a4;
  }
  *a2 = v10;
  *((_BYTE *)a2 + 2) = v11;
  *((_BYTE *)a2 + 3) = v24;
  result = a1[3];
  *((_DWORD *)a2 + 1) = result;
  if ( (v24 & 1) != 0 )
  {
    result = 4785;
    *(unsigned __int16 *)((char *)a2 + v10 - v11 - 2) = 4785;
  }
  a1[6] += v16 - a3;
  return result;
}
//偏移值:2B4F0
void __fastcall sub_1502B4F0(_DWORD *a1, _DWORD *a2, unsigned __int16 *a3)
{
  size_t v3; // esi
  int v4; // eax
  _DWORD *v5; // [esp+Ch] [ebp-4h]

  v5 = a1;
  if ( (*((_BYTE *)a3 + 3) & 4) != 0 )
  {
    v3 = *(a2 - 4);
  }
  else
  {
    v4 = *((unsigned __int8 *)a3 + 2) + 8;
    if ( (*((_BYTE *)a3 + 3) & 1) != 0 )
      v4 = *((unsigned __int8 *)a3 + 2) + 10;
    v3 = *a3 - v4;
  }
  if ( g_FillPatternEnabled && (*((_BYTE *)a3 + 3) & 4) == 0 )
  {
    memset(a2, 221, v3);
    a1 = v5;
  }
  g_TotalAllocatedMemory -= *a3;
  ++a1[15];
  StormHeap_InternalFree(a1, a3);
  sub_15035850();
}
void sub_15035850()
{
  ++dword_15057728;
}