//     int flags,     // [ECX] or [stack+?]：分配标志(可能是一些控制bit)
//     int edx0,      // [EDX] 具体用处不明，可能是保留
//     size_t Size,          // [esp+8h] 要分配的字节数
//     const char* name,     // [esp+0Ch] 名称
//     DWORD src_line,       // [esp+10h] 代码行号
//     DWORD flag            // [esp+14h] 进一步分配flag(与 0x4000000 / 0x8000000 / 0x8 等位或)
size_t __fastcall Storm_MemAlloc(int ecx, int edx, size_t Size, const char *name, DWORD src_line, DWORD flag)
{
  int heapIndex; // edi ComputeHeapIndex_2AD60 返回的堆索引
  _DWORD *pHeap; // esi 指向找到或新建的heap结构
  size_t allocatedPtr; // edi 最终返回的分配地址(放到eax)
  int localIndex; // [esp+0h] [ebp-4h] BYREF 临时存heapIndex或flags

  localIndex = ecx;                             // 1) 先存储下 flags
  // 2) 检查全局：dword_15056F7C 为“Storm内存管理是否初始化完成”的标志
  if ( !g_MemorySystemInitialized )
  {
    // 如果没初始化，标记错误并调用SMemAllocError_461再ExitProcess(1)
    dword_15055368 = 0;                         // 可能是“出现内存错误”
    Storm_AllocErrorHandler(0x8510007D, "SMemAlloc()", -1, 0, 0, 1u);
    //         0x8510007D,          // dwMessageId
    //         "SMemAlloc()",       // a2=出错时打印的信息
    //         -1,                  // ArgList=-1表示出错行?
    //         0,
    //         0,
    //         1u                  // 退出码
    ExitProcess(1u);                            // 结束进程 
  }
  // 3) 根据pArg、a3来计算堆索引(1~255之类)
  heapIndex = StormHeap_ComputeIndex((int *)name, src_line);
  // 4) 进入临界区(保护此heapIndex对应的堆分配操作)
  EnterCriticalSection(&g_HeapCriticalSections + (unsigned __int8)heapIndex);
  // 5) 获取该堆指针
  pHeap = (_DWORD *)dword_15056F80[(unsigned __int8)heapIndex];
  localIndex = (unsigned __int8)heapIndex;
  // 6) 若已存在pHeap，则在链表中找到 pHeap[1] == heapIndex 对应的项
  if ( pHeap )
  {
    while ( pHeap[1] != heapIndex )
    {
      pHeap = (_DWORD *)*pHeap;                 // 下一个
      if ( !pHeap )
        goto CreateHeap;                        // 若找不到就跳转去新建
    }
  }
  else
  {
    //  7) 若还没有分配heap结构，则创建
    //     CreateStormHeap_2A350( ... 4096, 0x1000, 0x10000 )
CreateHeap:
    pHeap = StormHeap_Create((char *)name, src_line, heapIndex, (unsigned __int8)heapIndex, 4096, 0x1000u, 0x10000u);
  }
  // 8) 调用 StormHeapAlloc_2B3B0 分配用户请求 Size 大小
  allocatedPtr = StormHeap_Alloc(&localIndex, (int)pHeap, flag, Size);
  // 9) 离开临界区(如果localIndex没被-1)
  if ( localIndex != -1 )
    LeaveCriticalSection(&g_HeapCriticalSections + localIndex);
  //  10) 如果有调试标志 dword_15057380 并且 pHeap != dword_15057380
  //      则调用 sub_1502AB50(不在贴出的代码中，可能是某种调试/记录函数)
  if ( dword_15057380 && (_DWORD *)dword_15057380 != pHeap )
    StormHeap_CleanupAll();
  // 11) 返回分配到的地址
  return allocatedPtr;
}
// 根据 (int*)a1 和 int a2 计算一个“堆索引”，值域应该在 1 ~ 255 之间，也会跟 Storm_502(...) 之类函数有关。
int __fastcall StormHeap_ComputeIndex(int *a1, int a2)
{
  int v4; // ebx
  int v5; // eax
  int result; // eax

  if ( a1 )
    v4 = *a1;
  else
    v4 = 0;
  if ( dword_1504955C && a1 == (int *)dword_15057398 && a2 == dword_15057394 )
  {
    if ( v4 == dword_15057390 )
      return dword_1505739C;
    dword_1504955C = 0;
  }
  if ( a1 )
    v5 = Storm_502(a1, 1, a2);
  else
    v5 = a2;
  result = v5 & 0x7FFFFFFF;
  dword_15057394 = a2;
  dword_15057398 = (int)a1;
  if ( !result )
    result = 1;
  dword_15057390 = v4;
  dword_1505739C = result;
  return result;
}
int __stdcall Storm_502(_BYTE *a1, char a2, int a3)
{
  _BYTE *v3; // esi
  int v5; // edi
  int v6; // ebx
  unsigned int v7; // edx
  unsigned int v8; // eax
  unsigned int v9; // eax
  unsigned int v10; // ecx

  v3 = a1;
  if ( !a1 )
  {
    Storm_SetLastError(0x57u);
    return 0;
  }
  v5 = 2146271213;
  v6 = -286331154;
  if ( a3 )
    v5 = a3;
  if ( (a2 & 1) != 0 )
  {
    v7 = (unsigned __int8)*a1;
    if ( *a1 )
    {
      do
      {
        ++v3;
        v5 = (dword_15043F18[v7 >> 4] - dword_15043F18[v7 & 0xF]) ^ (v6 + v5);
        v8 = v7 + 32 * v6;
        v7 = (unsigned __int8)*v3;
        v6 += v8 + v5 + 3;
      }
      while ( *v3 );
      if ( !v5 )
        return 1;
      return v5;
    }
  }
  else
  {
    v9 = (unsigned __int8)*a1;
    if ( *a1 )
    {
      do
      {
        ++v3;
        if ( v9 - 97 <= 0x19 )
          v9 -= 32;
        if ( v9 == 47 )
          v9 = 92;
        v5 = (dword_15043F18[v9 >> 4] - dword_15043F18[v9 & 0xF]) ^ (v6 + v5);
        v10 = v9 + 32 * v6;
        v9 = (unsigned __int8)*v3;
        v6 += v10 + v5 + 3;
      }
      while ( *v3 );
    }
  }
  if ( !v5 )
    return 1;
  return v5;
}
// VirtualAlloc 一大块内存，再 VirtualAlloc(..., MEM_COMMIT, ...) 一部分，初始化堆的一些字段，比如 size, capacity, pointer offset, ...
_DWORD *__fastcall StormHeap_Create(char *a1, int a2, int a3, size_t Size, int a5, SIZE_T a6, SIZE_T dwSize)
{
  _DWORD *result; // eax
  _DWORD *v9; // eax
  _DWORD *v10; // esi
  char *v11; // eax
  char *v12; // ecx
  _DWORD *v13; // edi
  int v14; // edx
  int v15; // eax
  _DWORD *v16; // ecx
  int ArgLista; // [esp+Ch] [ebp-4h]

  if ( Size == (unsigned __int8)a3 )
  {
    v9 = VirtualAlloc(0, dwSize, 0x2000u, 1u);
    v10 = v9;
    if ( !v9 )
    {
      dword_15055368 = 1;
      Storm_AllocErrorHandler(8u, a1, a2, 0, 0, 1u);
      ExitProcess(1u);
    }
    if ( !VirtualAlloc(v9, a6, 0x1000u, 4u) )
    {
      dword_15055368 = 1;
      Storm_AllocErrorHandler(8u, a1, a2, 0, 0, 1u);
      ExitProcess(1u);
    }
    if ( a1 )
      v11 = Storm_506(a1);
    else
      v11 = 0;
    v12 = v11 + 112;
    if ( (((_BYTE)v11 + 112) & 7) != 0 )
      v12 += 8 - (((_BYTE)v11 + 112) & 7);
    v10[1] = a3;
    v10[7] = (char *)v10 + (_DWORD)v12;
    v10[8] = (char *)v10 + (_DWORD)v12;
    v10[10] = a5;
    v10[11] = a6;
    v10[12] = dwSize;
    v10[2] = Size;
    v10[4] = 1;
    v10[9] = 0;
    v10[26] = a2;
    v10[17] = 0;
    v10[18] = 0;
    v10[19] = 0;
    v10[20] = 0;
    v10[21] = 0;
    v10[22] = 0;
    v10[23] = 0;
    v10[24] = 0;
    v10[25] = 0;
    if ( a1 )
      memcpy(v10 + 27, a1, (size_t)(v11 + 1));
    else
      *((_BYTE *)v10 + 108) = 0;
    LOWORD(ArgLista) = HIWORD(v10);
    HIWORD(ArgLista) = 28525;
    v10[3] = ArgLista;
    v13 = (_DWORD *)dword_15056F80[Size];
    if ( !v13 )
      goto LABEL_22;
    v14 = v10[1];
    if ( v13[1] == v14 )
      goto LABEL_22;
    v15 = dword_15056F80[Size];
    if ( !*v13 )
      goto LABEL_22;
    do
    {
      v16 = *(_DWORD **)v15;
      if ( *(_DWORD *)(*(_DWORD *)v15 + 4) == v14 )
        break;
      v15 = *(_DWORD *)v15;
    }
    while ( *v16 );
    if ( *(_DWORD *)v15 )
    {
      *v10 = *(_DWORD *)v15;
      *(_DWORD *)v15 = v10;
      return v10;
    }
    else
    {
LABEL_22:
      *v10 = v13;
      result = v10;
      dword_15056F80[Size] = (int)v10;
    }
  }
  else
  {
    Storm_SetLastError(0x57u);
    return 0;
  }
  return result;
}
// 核心的“分配 size 字节”的逻辑：
// 判断 Size > 0x7FFFFFFF 就报错退出
// 如果有“清零标志(8)”就 memset(..., 0)；如果全局 dword_15056F70 不为 0，就填充 0xEE(238)；
// dword_1505738C += size; 作为全局统计
size_t __fastcall StormHeap_Alloc(_DWORD *a1, int a2, int a3, size_t Size)
{
  size_t v4; // edi
  char v7; // al
  void *v8; // eax
  int v10; // [esp-10h] [ebp-1Ch]
  int v11; // [esp-10h] [ebp-1Ch]
  size_t Sizea; // [esp+18h] [ebp+Ch]

  v4 = Size;
  if ( Size > 0x7FFFFFFF )
  {
    if ( *a1 != -1 )
    {
      LeaveCriticalSection(&g_HeapCriticalSections + *a1);
      *a1 = -1;
    }
    v10 = *(_DWORD *)(a2 + 104);
    dword_15055368 = 1;
    Storm_AllocErrorHandler(8u, (char *)(a2 + 108), v10, 0, 0, 1u);
    ExitProcess(1u);
  }
  if ( !a2 )
    goto LABEL_16;
  v7 = 0;
  if ( (a3 & 0x4000000) != 0 )
    v7 = 64;
  LOBYTE(Size) = v7;
  if ( (a3 & 0x8000000) != 0 )
    LOBYTE(Size) = v7 | 0x80;
  v8 = (void *)StormHeap_AllocPage((LPVOID)Size);
  Sizea = (size_t)v8;
  if ( !v8 )
  {
LABEL_16:
    if ( *a1 != -1 )
    {
      LeaveCriticalSection(&g_HeapCriticalSections + *a1);
      *a1 = -1;
    }
    if ( *(_BYTE *)(a2 + 108) )
    {
      v11 = *(_DWORD *)(a2 + 104);
      dword_15055368 = 1;
      Storm_AllocErrorHandler(8u, (char *)(a2 + 108), v11, 0, 0, 1u);
      ExitProcess(1u);
    }
    dword_15055368 = 1;
    Storm_AllocErrorHandler(8u, "SMemHeapAlloc()", -1, 0, 0, 1u);
    ExitProcess(1u);
  }
  if ( (a3 & 8) != 0 )
  {
    memset(v8, 0, v4);
  }
  else if ( dword_15056F70 )
  {
    memset(v8, 238, v4);
  }
  Storm_GlobalCounterInc();
  g_TotalAllocatedMemory += v4;
  ++*(_DWORD *)(a2 + 56);
  return Sizea;
}
// 这是在 StormHeapAlloc_2B3B0 里被调用的一个重要子函数，做了很多对 VirtualAlloc 或“对齐、保护页”等操作。
// 看逻辑，是在申请一块更大的物理页/地址空间，然后存储到 (v20 + 2) = ...。
unsigned __int16 *__fastcall StormHeap_AllocPage(char *a1, unsigned int a2, LPVOID lpAddress)
{
  BOOL v4; // eax
  BOOL v5; // ebx
  unsigned int v6; // ecx
  int v7; // eax
  int v8; // ebx
  unsigned int v9; // eax
  unsigned int v10; // edi
  bool v11; // zf
  char *v12; // ecx
  unsigned int v13; // edx
  char *v14; // eax
  unsigned __int16 *v15; // ebx
  unsigned __int16 *v16; // eax
  unsigned int v17; // edx
  unsigned int v18; // eax
  int v19; // ebx
  unsigned __int16 *v20; // edi
  unsigned int v21; // ebx
  int v22; // ecx
  char *v23; // eax
  char *v24; // ecx
  SIZE_T v25; // ecx
  unsigned int v26; // edx
  char *v27; // eax
  int v28; // edx
  int v29; // edx
  int v30; // eax
  char v31; // bl
  DWORD v32; // ecx
  int v33; // ebx
  int v34; // edx
  DWORD v35; // ebx
  LPVOID v36; // eax
  char *v37; // eax
  unsigned __int16 *result; // eax
  unsigned int v39; // edx
  char *v40; // ecx
  struct _SYSTEM_INFO SystemInfo; // [esp+Ch] [ebp-48h] BYREF
  DWORD v42; // [esp+30h] [ebp-24h]
  int v43; // [esp+34h] [ebp-20h]
  int v44; // [esp+38h] [ebp-1Ch]
  char *v45; // [esp+3Ch] [ebp-18h] BYREF
  unsigned int v46; // [esp+40h] [ebp-14h] BYREF
  char *v47; // [esp+44h] [ebp-10h]
  unsigned int v48; // [esp+48h] [ebp-Ch]
  unsigned int v49; // [esp+4Ch] [ebp-8h]
  unsigned int v50; // [esp+50h] [ebp-4h]
  void *lpAddressa; // [esp+5Ch] [ebp+8h]

  v49 = a2;
  v4 = dword_15056F74 || a2 > 0xFE7B;
  v44 = v4;
  v5 = dword_1505536C && !v4;
  v43 = v5;
  v6 = a2;
  if ( v4 )
    v6 = 4;
  v7 = v5 ? 2 : 0;
  v8 = 8;
  v9 = v6 + 8 + v7;
  v10 = v9 + (-v9 & 7);
  v42 = v10;
  v45 = (char *)v10;
  v50 = -v9 & 7;
  v46 = v50;
  if ( v10 >> 5 < 8 )
    v8 = v10 >> 5;
  if ( *((_DWORD *)a1 + 9) >= 4u && !*(_DWORD *)&a1[4 * v8 + 68] )
    StormHeap_RebuildFreeList(a1);
  v48 = 0x7FFFFFFF;
  v11 = *(_DWORD *)&a1[4 * v8 + 68] == 0;
  v12 = &a1[4 * v8 + 68];
  v47 = 0;
  if ( v11 )
  {
    v13 = v8 + 1;
    v14 = &a1[4 * v8 + 68];
    do
    {
      if ( v13 >= 9 )
        break;
      v14 += 4;
      ++v13;
      v12 = v14;
    }
    while ( !*(_DWORD *)v14 );
  }
  v15 = *(unsigned __int16 **)v12;
  v16 = *(unsigned __int16 **)v12;
  if ( *(_DWORD *)v12 )
  {
    v17 = 16;
    do
    {
      v18 = *v16 - v10;
      if ( v18 < v48 )
      {
        v48 = v18;
        v47 = v12;
        if ( v18 < v17 )
          break;
        v17 += 4;
      }
      v12 = (char *)(v15 + 2);
      v15 = (unsigned __int16 *)*((_DWORD *)v15 + 1);
      v16 = v15;
    }
    while ( v15 );
  }
  v19 = 0;
  if ( v47 )
  {
    v20 = *(unsigned __int16 **)v47;
    v21 = *(unsigned __int8 *)(*(_DWORD *)v47 + 3);
    *(_DWORD *)v47 = *(_DWORD *)(*(_DWORD *)v47 + 4);
    v22 = *((_DWORD *)a1 + 9);
    v23 = (char *)v20 + *v20;
    v19 = (v21 >> 4) & 1;
    if ( v22 && (v19 || v23 != *((char **)a1 + 8) && (v23[3] & 2) != 0) )
      *((_DWORD *)a1 + 9) = v22 - 1;
    StormHeap_CombineFreeBlocks((int)a1, v20, (int *)&v45, (char *)&v46);
    v24 = v45;
    v50 = v46;
  }
  else
  {
    v25 = *((_DWORD *)a1 + 12);
    v26 = v10 + *((_DWORD *)a1 + 8) - (_DWORD)a1;
    v45 = a1 + 32;
    if ( v26 > v25 )
    {
      if ( v25 < 0x10000000 )
        v25 *= 2;
      v27 = (char *)StormHeap_Create(
                      a1 + 108,
                      *((_DWORD *)a1 + 26),
                      *((_DWORD *)a1 + 1),
                      *((_DWORD *)a1 + 2),
                      v25 >> 3,
                      v25 >> 3,
                      v25);
      if ( !v27 )
        return 0;
      *((_DWORD *)a1 + 4) = 0;
      a1 = v27;
      v28 = *((_DWORD *)v27 + 8) - (_DWORD)v27;
      v45 = v27 + 32;
      v26 = v10 + v28;
    }
    if ( v26 > *((_DWORD *)a1 + 11) && !StormHeap_CommitPages(a1, v26) )
      return 0;
    v24 = (char *)v42;
    v20 = *(unsigned __int16 **)v45;
    *(_DWORD *)v45 += v42;
  }
  ++*((_DWORD *)a1 + 5);
  *((_DWORD *)a1 + 6) += v49;
  v29 = v44;
  v30 = v44;
  *v20 = (unsigned __int16)v24;
  v31 = (unsigned __int8)lpAddress | (v43 != 0) | (v30 != 0 ? 4 : 0) | (v19 != 0 ? 0x10 : 0);
  *((_BYTE *)v20 + 2) = v50;
  *((_BYTE *)v20 + 3) = v31;
  *((_DWORD *)v20 + 1) = *((_DWORD *)a1 + 3);
  if ( (v31 & 1) != 0 )
    *(_WORD *)&v24[(_DWORD)v20 - v50 - 2] = 4785;
  if ( !v29 )
    return v20 + 4;
  v32 = g_VirtualMemoryPageSize;
  *((_DWORD *)v20 + 2) = 0;
  if ( !v32 )
  {
    GetSystemInfo(&SystemInfo);
    v32 = 1;
    g_VirtualMemoryPageSize = 1;
    if ( SystemInfo.dwPageSize > 1 )
    {
      do
        v32 *= 2;
      while ( v32 < SystemInfo.dwPageSize );
      g_VirtualMemoryPageSize = v32;
    }
  }
  v33 = 0;
  v34 = v49 + 16;
  lpAddressa = 0;
  v43 = v49 + 16;
  if ( dword_1505536C || dword_15056F74 )
  {
    v42 = v32 - 1;
    v35 = v32 - (v34 & (v32 - 1));
    if ( dword_15056F74 )
    {
      v33 = v42 & v35;
      v36 = VirtualAlloc(0, v33 + v49 + 20, 0x2000u, 1u);
      v34 = v43;
      lpAddressa = v36;
    }
    else
    {
      v33 = (v32 - 4) & v35;
    }
  }
  v37 = (char *)VirtualAlloc(lpAddressa, v33 + v34, 0x1000u, 4u);
  if ( !v37 )
  {
    StormHeap_InternalFree(a1, v20);
    return 0;
  }
  v39 = v49;
  v40 = &v37[v33];
  *((_DWORD *)v40 + 1) = v20;
  *(_DWORD *)v40 = v39;
  *((_WORD *)v40 + 4) = (v39 + 0xFFFF) >> 16;
  *((_WORD *)v40 + 5) = 3072;
  *((_DWORD *)v40 + 3) = *((_DWORD *)a1 + 3);
  result = (unsigned __int16 *)&v37[v33 + 16];
  *((_DWORD *)v20 + 2) = v40 + 16;
  *((_DWORD *)a1 + 13) += v39;
  return result;
}
// 叫了 v1 = a1[7], v2 == a1[8] 之类循环，把空闲块重新链接到 a1[v13+17]。看上去是“扫描并重建空闲链表”。
_DWORD *__fastcall StormHeap_RebuildFreeList(_DWORD *a1)
{
  unsigned __int16 *v1; // esi
  unsigned __int16 *v2; // eax
  int v3; // ebx
  unsigned int v4; // edx
  int v5; // ebx
  unsigned __int16 v6; // cx
  unsigned int v7; // edx
  int v8; // ecx
  int *v9; // edx
  _DWORD *result; // eax
  _DWORD *v11; // [esp+4h] [ebp-2Ch]
  _DWORD *v12; // [esp+8h] [ebp-28h] BYREF
  _DWORD *v13; // [esp+Ch] [ebp-24h]
  _DWORD *v14; // [esp+10h] [ebp-20h]
  _DWORD *v15; // [esp+14h] [ebp-1Ch]
  _DWORD *v16; // [esp+18h] [ebp-18h]
  _DWORD *v17; // [esp+1Ch] [ebp-14h]
  _DWORD *v18; // [esp+20h] [ebp-10h]
  _DWORD *v19; // [esp+24h] [ebp-Ch]
  _DWORD *v20; // [esp+28h] [ebp-8h]

  v11 = a1;
  v12 = a1 + 17;
  v13 = a1 + 18;
  v14 = a1 + 19;
  v15 = a1 + 20;
  v16 = a1 + 21;
  v17 = a1 + 22;
  v18 = a1 + 23;
  v19 = a1 + 24;
  v20 = a1 + 25;
  v1 = 0;
  v2 = (unsigned __int16 *)a1[7];
  if ( v2 == (unsigned __int16 *)a1[8] )
    goto LABEL_18;
  v3 = 8;
  do
  {
    if ( (*((_BYTE *)v2 + 3) & 2) == 0 )
      goto LABEL_13;
    *((_DWORD *)v2 + 1) = 0;
    if ( v1 )
    {
      v4 = *v1;
      if ( v2 == (unsigned __int16 *)((char *)v1 + v4) )
      {
        v5 = *v2;
        if ( v4 + v5 <= 0xFFFF )
        {
          v6 = v5 + *v1;
          v3 = 8;
          *v1 = v6;
          goto LABEL_13;
        }
        v3 = 8;
      }
      v7 = v4 >> 5;
      v8 = 8;
      if ( v7 < 8 )
        v8 = v7;
      v9 = (int *)&(&v12)[v8];
      *(_DWORD *)*v9 = v1;
      *v9 = (int)(v1 + 2);
    }
    v1 = v2;
LABEL_13:
    v2 = (unsigned __int16 *)((char *)v2 + *v2);
    a1 = v11;
  }
  while ( v2 != (unsigned __int16 *)v11[8] );
  if ( v1 )
  {
    if ( *v1 >> 5 < 8u )
      v3 = *v1 >> 5;
    *(&v12)[v3] = v1;
    (&v12)[v3] = v1 + 2;
  }
LABEL_18:
  *v12 = 0;
  *v13 = 0;
  *v14 = 0;
  *v15 = 0;
  *v16 = 0;
  *v17 = 0;
  *v18 = 0;
  *v19 = 0;
  result = v20;
  *v20 = 0;
  a1[9] = 0;
  return result;
}
// 也是在处理内存块合并之类：v10[3] &= ~0x10; ...
char *__fastcall StormHeap_CombineFreeBlocks(int a1, unsigned __int16 *a2, int *a3, char *a4)
{
  int v4; // esi
  char *v6; // eax
  int v7; // ecx
  unsigned int v8; // esi
  char *result; // eax
  char *v10; // edx
  int v11; // ecx

  v4 = *a2;
  v6 = (char *)a2 + v4;
  v7 = *a3;
  v8 = v4 - *a3;
  if ( v6 == *(char **)(a1 + 32) )
  {
    result = (char *)a2 + v7;
    *(_DWORD *)(a1 + 32) = (char *)a2 + v7;
  }
  else if ( v8 < 0x10 )
  {
    v6[3] &= ~0x10u;
    result = a4;
    *a3 += v8;
    *(_DWORD *)a4 += v8;
  }
  else
  {
    v10 = (char *)a2 + v7;
    v11 = 8;
    if ( (unsigned __int16)v8 >> 5 < 8u )
      v11 = (unsigned __int16)v8 >> 5;
    *(_WORD *)v10 = v8;
    *((_WORD *)v10 + 1) = 512;
    result = *(char **)(a1 + 4 * v11 + 68);
    *((_DWORD *)v10 + 1) = result;
    *(_DWORD *)(a1 + 4 * v11 + 68) = v10;
  }
  return result;
}
// VirtualAlloc 一大块内存，再 VirtualAlloc(..., MEM_COMMIT, ...) 一部分，初始化堆的一些字段，比如 size, capacity, pointer offset, ...
_DWORD *__fastcall StormHeap_Create(char *a1, int a2, int a3, size_t Size, int a5, SIZE_T a6, SIZE_T dwSize)
{
  _DWORD *result; // eax
  _DWORD *v9; // eax
  _DWORD *v10; // esi
  char *v11; // eax
  char *v12; // ecx
  _DWORD *v13; // edi
  int v14; // edx
  int v15; // eax
  _DWORD *v16; // ecx
  int ArgLista; // [esp+Ch] [ebp-4h]

  if ( Size == (unsigned __int8)a3 )
  {
    v9 = VirtualAlloc(0, dwSize, 0x2000u, 1u);
    v10 = v9;
    if ( !v9 )
    {
      dword_15055368 = 1;
      Storm_AllocErrorHandler(8u, a1, a2, 0, 0, 1u);
      ExitProcess(1u);
    }
    if ( !VirtualAlloc(v9, a6, 0x1000u, 4u) )
    {
      dword_15055368 = 1;
      Storm_AllocErrorHandler(8u, a1, a2, 0, 0, 1u);
      ExitProcess(1u);
    }
    if ( a1 )
      v11 = Storm_506(a1);
    else
      v11 = 0;
    v12 = v11 + 112;
    if ( (((_BYTE)v11 + 112) & 7) != 0 )
      v12 += 8 - (((_BYTE)v11 + 112) & 7);
    v10[1] = a3;
    v10[7] = (char *)v10 + (_DWORD)v12;
    v10[8] = (char *)v10 + (_DWORD)v12;
    v10[10] = a5;
    v10[11] = a6;
    v10[12] = dwSize;
    v10[2] = Size;
    v10[4] = 1;
    v10[9] = 0;
    v10[26] = a2;
    v10[17] = 0;
    v10[18] = 0;
    v10[19] = 0;
    v10[20] = 0;
    v10[21] = 0;
    v10[22] = 0;
    v10[23] = 0;
    v10[24] = 0;
    v10[25] = 0;
    if ( a1 )
      memcpy(v10 + 27, a1, (size_t)(v11 + 1));
    else
      *((_BYTE *)v10 + 108) = 0;
    LOWORD(ArgLista) = HIWORD(v10);
    HIWORD(ArgLista) = 28525;
    v10[3] = ArgLista;
    v13 = (_DWORD *)dword_15056F80[Size];
    if ( !v13 )
      goto LABEL_22;
    v14 = v10[1];
    if ( v13[1] == v14 )
      goto LABEL_22;
    v15 = dword_15056F80[Size];
    if ( !*v13 )
      goto LABEL_22;
    do
    {
      v16 = *(_DWORD **)v15;
      if ( *(_DWORD *)(*(_DWORD *)v15 + 4) == v14 )
        break;
      v15 = *(_DWORD *)v15;
    }
    while ( *v16 );
    if ( *(_DWORD *)v15 )
    {
      *v10 = *(_DWORD *)v15;
      *(_DWORD *)v15 = v10;
      return v10;
    }
    else
    {
LABEL_22:
      *v10 = v13;
      result = v10;
      dword_15056F80[Size] = (int)v10;
    }
  }
  else
  {
    Storm_SetLastError(0x57u);
    return 0;
  }
  return result;
}
// 里头 VirtualAlloc((char *)a1 + v4, v5, MEM_COMMIT, PAGE_READWRITE) 之类，给堆追加 commit 页面。
int __fastcall StormHeap_CommitPages(_DWORD *a1, int a2)
{
  int v3; // eax
  int v4; // ecx
  SIZE_T v5; // esi
  int v6; // edx
  unsigned int v7; // edx
  int result; // eax

  v3 = a1[10];
  v4 = a1[11];
  v5 = a2 - v4;
  v6 = (a2 - v4) & (v3 - 1);
  if ( v6 )
    v5 += v3 - v6;
  v7 = a1[12];
  if ( v4 + v5 > v7 )
    v5 = v7 - v4;
  result = (int)VirtualAlloc((char *)a1 + v4, v5, 0x1000u, 4u);
  if ( result )
  {
    a1[11] += v5;
    return 1;
  }
  return result;
}
// 这里把 size_t v3; = block size，dword_1505738C -= *a3, ++a1[15]，然后最后 sub_1502ABF0(a1, a3).
char __fastcall StormHeap_InternalFree(_DWORD *a1, unsigned __int16 *a2)
{
  char v4; // cl
  int v5; // ecx
  int *v6; // ecx
  int v7; // ebx
  void *v8; // eax
  int v9; // eax
  int v10; // edx
  int v11; // eax
  char *v12; // edx
  int v13; // ecx
  bool v14; // cf

  v4 = *((_BYTE *)a2 + 3);
  if ( (v4 & 4) != 0 )
  {
    v5 = *((_DWORD *)a2 + 2);
    if ( v5 )
    {
      v6 = (int *)(v5 - 16);
      v7 = *v6;
      v8 = (void *)((unsigned int)v6 & ~(g_VirtualMemoryPageSize - 1));
      a1[13] -= *v6;
      VirtualFree(v8, 0, 0x8000u);
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + 2);
    v7 = *a2 - v9 - 8;
    if ( (v4 & 1) != 0 )
      v7 = *a2 - v9 - 10;
  }
  --a1[5];
  a1[6] -= v7;
  v10 = *a2;
  LOBYTE(v11) = *((_BYTE *)a2 + 3) & 0x10 | 2;
  *((_BYTE *)a2 + 2) = 0;
  v12 = (char *)a2 + v10;
  *((_BYTE *)a2 + 3) = v11;
  if ( (char *)a1[8] == v12 )
  {
    *((_DWORD *)a2 + 1) = 0;
    a1[8] = a2;
  }
  else
  {
    v12[3] |= 0x10u;
    v13 = 8;
    if ( *a2 >> 5 < 8u )
      v13 = *a2 >> 5;
    v11 = a1[v13 + 17];
    *((_DWORD *)a2 + 1) = v11;
    a1[v13 + 17] = a2;
    if ( (*((_BYTE *)a2 + 3) & 0x10) != 0 || (v12[3] & 2) != 0 )
      ++a1[9];
  }
  if ( !a1[5] )
  {
    v11 = a1[7];
    a1[8] = v11;
    a1[17] = 0;
    a1[18] = 0;
    a1[19] = 0;
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
    a1[23] = 0;
    a1[24] = 0;
    a1[25] = 0;
    v14 = a1[1] < 0x80000000;
    a1[9] = 0;
    if ( v14 )
    {
      v11 = a1[2];
      dword_15057380 = (int)a1;
      dword_15055370[v11] = 1;
    }
  }
  return v11;
}
void Storm_GlobalCounterInc()
{
  ++dword_15057724;
}
// 会遍历所有 256 个堆，清理无效heap (VirtualFree)。
void StormHeap_CleanupAll()
{
  int v0; // ecx
  struct _RTL_CRITICAL_SECTION *v1; // ebx
  int v2; // edi
  bool v3; // zf
  int *v4; // esi
  int *v5; // eax
  int v6; // [esp+Ch] [ebp-4h]

  v0 = 256;
  dword_15057380 = 0;
  v1 = &g_HeapCriticalSections;
  v6 = 256;
  v2 = 0;
  do
  {
    if ( dword_15055370[v2] )
    {
      EnterCriticalSection(v1);
      v3 = dword_15056F80[v2] == 0;
      v4 = &dword_15056F80[v2];
      dword_15055370[v2] = 0;
      if ( !v3 )
      {
        do
        {
          v5 = (int *)*v4;
          if ( *(_DWORD *)(*v4 + 20) || (unsigned int)v5[1] >= 0x80000000 )
          {
            v4 = (int *)*v4;
          }
          else
          {
            *v4 = *v5;
            VirtualFree(v5, 0, 0x8000u);
          }
        }
        while ( *v4 );
      }
      LeaveCriticalSection(v1);
      v0 = v6;
    }
    ++v2;
    ++v1;
    v6 = --v0;
  }
  while ( v0 );
}