int __stdcall Storm_MemFree(int a1, char *a2, int ArgList, int a4)
{
  int result; // eax
  int v5; // edi
  int v6; // esi
  int ArgLista; // [esp+10h] [ebp+10h]

  if ( g_MemorySystemInitialized )
  {
    result = Storm_CheckMemPointer(a1, 1, a2, ArgList);
    if ( result )
    {
      if ( a1 )
      {
        v5 = a1 - 8;
        if ( (*(_BYTE *)(a1 - 5) & 8) != 0 )
          v5 = *(_DWORD *)(a1 - 12);
      }
      else
      {
        v5 = 0;
      }
      v6 = *(unsigned __int16 *)(v5 + 4) << 16;
      EnterCriticalSection(&g_HeapCriticalSections + *(_DWORD *)(v6 + 8));
      ArgLista = *(_DWORD *)(v6 + 8);
      sub_1502B4F0(v6, a1, v5);
      if ( ArgLista != -1 )
        LeaveCriticalSection(&g_HeapCriticalSections + ArgLista);
      return 1;
    }
  }
  else
  {
    Storm_SetLastError(0x8510007D);
    if ( g_ErrorHandlingEnabled )
      Storm_AllocErrorHandler(0x8510007D, "SMemFree()", -1, 0, 1, 1u);
    return 0;
  }
  return result;
}
// 用来检查指针是否合法，是否带某些标志 (0x8510007C / 0x8510007A 等)；若不合法就调用Storm_AllocErrorHandler.
int __fastcall Storm_CheckMemPointer(int a1, int edx0, char *a2, int ArgList)
{
  char v5; // al

  if ( !a1 )
  {
    if ( edx0 )
    {
      Storm_SetLastError(0x85100081);
      if ( g_ErrorHandlingEnabled )
        Storm_AllocErrorHandler(0x85100081, a2, ArgList, 0, 1, 1u);
    }
    return 0;
  }
  if ( *(_WORD *)(a1 - 2) != 28525 )
  {
    if ( edx0 )
    {
      Storm_SetLastError(0x8510007C);
      if ( g_ErrorHandlingEnabled )
      {
        Storm_AllocErrorHandler(0x8510007C, a2, ArgList, 0, 1, 1u);
        return 0;
      }
    }
    return 0;
  }
  v5 = *(_BYTE *)(a1 - 5);
  if ( (v5 & 2) != 0 )
  {
    if ( !edx0 )
      return 0;
    Storm_SetLastError(0x8510007A);
    if ( !g_ErrorHandlingEnabled )
      return 0;
    Storm_AllocErrorHandler(0x8510007A, a2, ArgList, 0, 1, 1u);
    return 0;
  }
  else
  {
    if ( (v5 & 1) != 0
      && *(_WORD *)(*(unsigned __int16 *)(a1 - 8) - *(unsigned __int8 *)(a1 - 6) + a1 - 10) != 4785
      && edx0 )
    {
      Storm_MemErrorCallback(0x8510007B, (char)a2, ArgList);
    }
    return 1;
  }
}
void __fastcall sub_1502B4F0(_DWORD *a1, _DWORD *a2, unsigned __int16 *a3)
{
  size_t v3; // esi
  int v4; // eax
  _DWORD *v5; // [esp+Ch] [ebp-4h]

  v5 = a1;
  if ( (*((_BYTE *)a3 + 3) & 4) != 0 )
  {
    v3 = *(a2 - 4);
  }
  else
  {
    v4 = *((unsigned __int8 *)a3 + 2) + 8;
    if ( (*((_BYTE *)a3 + 3) & 1) != 0 )
      v4 = *((unsigned __int8 *)a3 + 2) + 10;
    v3 = *a3 - v4;
  }
  if ( dword_15056F70 && (*((_BYTE *)a3 + 3) & 4) == 0 )
  {
    memset(a2, 221, v3);
    a1 = v5;
  }
  g_TotalAllocatedMemory -= *a3;
  ++a1[15];
  StormHeap_InternalFree(a1, a3);
  sub_15035850();
}
// 这里把 size_t v3; = block size，dword_1505738C -= *a3, ++a1[15]，然后最后 sub_1502ABF0(a1, a3).
char __fastcall StormHeap_InternalFree(_DWORD *a1, unsigned __int16 *a2)
{
  char v4; // cl
  int v5; // ecx
  int *v6; // ecx
  int v7; // ebx
  void *v8; // eax
  int v9; // eax
  int v10; // edx
  int v11; // eax
  char *v12; // edx
  int v13; // ecx
  bool v14; // cf

  v4 = *((_BYTE *)a2 + 3);
  if ( (v4 & 4) != 0 )
  {
    v5 = *((_DWORD *)a2 + 2);
    if ( v5 )
    {
      v6 = (int *)(v5 - 16);
      v7 = *v6;
      v8 = (void *)((unsigned int)v6 & ~(g_VirtualMemoryPageSize - 1));
      a1[13] -= *v6;
      VirtualFree(v8, 0, 0x8000u);
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + 2);
    v7 = *a2 - v9 - 8;
    if ( (v4 & 1) != 0 )
      v7 = *a2 - v9 - 10;
  }
  --a1[5];
  a1[6] -= v7;
  v10 = *a2;
  LOBYTE(v11) = *((_BYTE *)a2 + 3) & 0x10 | 2;
  *((_BYTE *)a2 + 2) = 0;
  v12 = (char *)a2 + v10;
  *((_BYTE *)a2 + 3) = v11;
  if ( (char *)a1[8] == v12 )
  {
    *((_DWORD *)a2 + 1) = 0;
    a1[8] = a2;
  }
  else
  {
    v12[3] |= 0x10u;
    v13 = 8;
    if ( *a2 >> 5 < 8u )
      v13 = *a2 >> 5;
    v11 = a1[v13 + 17];
    *((_DWORD *)a2 + 1) = v11;
    a1[v13 + 17] = a2;
    if ( (*((_BYTE *)a2 + 3) & 0x10) != 0 || (v12[3] & 2) != 0 )
      ++a1[9];
  }
  if ( !a1[5] )
  {
    v11 = a1[7];
    a1[8] = v11;
    a1[17] = 0;
    a1[18] = 0;
    a1[19] = 0;
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
    a1[23] = 0;
    a1[24] = 0;
    a1[25] = 0;
    v14 = a1[1] < 0x80000000;
    a1[9] = 0;
    if ( v14 )
    {
      v11 = a1[2];
      dword_15057380 = (int)a1;
      dword_15055370[v11] = 1;
    }
  }
  return v11;
}
void sub_15035850()
{
  ++dword_15057728;
}
size_t __fastcall Storm_MemReAlloc(int a1, int a2, _DWORD *Src, size_t Size, int *a5, int ArgList, int a7)
{
  char *v8; // edi
  int v9; // esi
  int v10; // esi
  void *Srca; // [esp+8h] [ebp+8h]

  if ( !g_MemorySystemInitialized )
  {
    dword_15055368 = 0;
    Storm_AllocErrorHandler(0x8510007D, "SMemReAlloc()", -1, 0, 0, 1u);
    ExitProcess(1u);
  }
  if ( !Src || !Storm_CheckMemPointer((int)Src, (char)a5, ArgList) )
    return Storm_MemAlloc(a1, a2, Size, a5, ArgList, a7);
  v8 = (char *)(Src - 2);
  if ( (*((_BYTE *)Src - 5) & 8) != 0 )
    v8 = (char *)*(Src - 3);
  v9 = *((unsigned __int16 *)v8 + 2) << 16;
  EnterCriticalSection(&g_HeapCriticalSections + *(_DWORD *)(v9 + 8));
  Srca = *(void **)(v9 + 8);
  v10 = StormHeap_ReallocImpl(Src, (int)v8, Size, a7);
  if ( Srca != (void *)-1 )
    LeaveCriticalSection(&g_HeapCriticalSections + (_DWORD)Srca);
  return v10;
}
// 用来检查指针是否合法，是否带某些标志 (0x8510007C / 0x8510007A 等)；若不合法就调用Storm_AllocErrorHandler.
int __fastcall Storm_CheckMemPointer(int a1, int edx0, char *a2, int ArgList)
{
  char v5; // al

  if ( !a1 )
  {
    if ( edx0 )
    {
      Storm_SetLastError(0x85100081);
      if ( g_ErrorHandlingEnabled )
        Storm_AllocErrorHandler(0x85100081, a2, ArgList, 0, 1, 1u);
    }
    return 0;
  }
  if ( *(_WORD *)(a1 - 2) != 28525 )
  {
    if ( edx0 )
    {
      Storm_SetLastError(0x8510007C);
      if ( g_ErrorHandlingEnabled )
      {
        Storm_AllocErrorHandler(0x8510007C, a2, ArgList, 0, 1, 1u);
        return 0;
      }
    }
    return 0;
  }
  v5 = *(_BYTE *)(a1 - 5);
  if ( (v5 & 2) != 0 )
  {
    if ( !edx0 )
      return 0;
    Storm_SetLastError(0x8510007A);
    if ( !g_ErrorHandlingEnabled )
      return 0;
    Storm_AllocErrorHandler(0x8510007A, a2, ArgList, 0, 1, 1u);
    return 0;
  }
  else
  {
    if ( (v5 & 1) != 0
      && *(_WORD *)(*(unsigned __int16 *)(a1 - 8) - *(unsigned __int8 *)(a1 - 6) + a1 - 10) != 4785
      && edx0 )
    {
      Storm_MemErrorCallback(0x8510007B, (char)a2, ArgList);
    }
    return 1;
  }
}
char *__fastcall StormHeap_ReallocImpl(_DWORD *a1, _DWORD *a2, char *Src, unsigned __int16 *a4, size_t Size, char a6)
{
  _DWORD *v6; // eax
  char v7; // cl
  size_t v8; // edi
  int v9; // ecx
  char *v10; // ebx
  char v11; // dl
  size_t v13; // eax

  v6 = a2;
  v7 = *((_BYTE *)a4 + 3) & 4;
  if ( v7 )
  {
    v8 = *((_DWORD *)Src - 4);
  }
  else
  {
    v9 = *((unsigned __int8 *)a4 + 2) + 8;
    if ( (*((_BYTE *)a4 + 3) & 1) != 0 )
      v9 = *((unsigned __int8 *)a4 + 2) + 10;
    v8 = *a4 - v9;
    v7 = 0;
  }
  v10 = 0;
  if ( !dword_15056F78 && !v7 )
  {
    if ( Size >= v8 )
    {
      if ( Size <= v8 )
        goto LABEL_14;
      if ( sub_1502AE30(v8, Size) )
        v10 = Src;
    }
    else
    {
      sub_1502B680(v8, Size);
      v10 = Src;
    }
    v6 = a2;
  }
LABEL_14:
  ++v6[16];
  v11 = a6;
  if ( v10 )
  {
    g_TotalAllocatedMemory += Size - v8;
    ++a2[14];
  }
  else
  {
    if ( (a6 & 0x10) != 0 )
      return 0;
    v10 = (char *)StormHeap_Alloc(a1, (int)v6, 0, Size);
    if ( v10 && v8 && Size )
    {
      v13 = Size;
      if ( v8 < Size )
        v13 = v8;
      memcpy(v10, Src, v13);
    }
    sub_1502B4F0(a2, Src, a4);
    if ( !v10 )
      return 0;
    v11 = a6;
  }
  if ( Size > v8 )
  {
    if ( (v11 & 8) != 0 )
    {
      memset(&v10[v8], 0, Size - v8);
    }
    else if ( dword_15056F70 )
    {
      memset(&v10[v8], 238, Size - v8);
    }
  }
  return v10;
}
int __fastcall sub_1502AE30(_DWORD *a1, unsigned __int16 *a2, int a3, unsigned int a4)
{
  int v6; // ecx
  BOOL v7; // eax
  BOOL v8; // edx
  unsigned int v9; // esi
  int v10; // edx
  unsigned int v11; // eax
  int v12; // eax
  int v13; // esi
  int v14; // edx
  unsigned int v15; // edx
  bool v16; // zf
  int v17; // ecx
  unsigned int v18; // esi
  unsigned __int16 *v19; // ecx
  int v20; // eax
  unsigned int v21; // ecx
  unsigned int v22; // ecx
  unsigned int v23; // edx
  int v24; // eax
  int v25; // eax
  char v26; // al
  BOOL v28; // [esp+Ch] [ebp-14h]
  int v29; // [esp+10h] [ebp-10h] BYREF
  int v30; // [esp+14h] [ebp-Ch]
  unsigned int v31; // [esp+18h] [ebp-8h] BYREF
  unsigned int v32; // [esp+1Ch] [ebp-4h]

  v6 = a4;
  v7 = dword_15056F74 || a4 > 0xFE7B;
  v32 = v7;
  v8 = dword_1505536C && !v7;
  v28 = v8;
  if ( v7 )
    v6 = 4;
  v9 = v6 + (v8 ? 10 : 8) + (-(v6 + (v8 ? 10 : 8)) & 7);
  v31 = v9;
  v10 = -(v6 + (v8 ? 10 : 8)) & 7;
  v29 = v10;
  if ( v9 > 0xFFFF || v32 )
    return 0;
  v11 = *a2;
  if ( v9 > v11 )
  {
    v15 = 0;
    v16 = v9 == v11;
    v32 = v9 - v11;
    v17 = (int)a2 + v9;
    v18 = v9 - v11;
    v30 = v17;
    v19 = (unsigned __int16 *)((char *)a2 + v11);
    if ( !v16 )
    {
      do
      {
        if ( v19 == (unsigned __int16 *)a1[8] )
          break;
        if ( (*((_BYTE *)v19 + 3) & 2) == 0 )
          return 0;
        v20 = *v19;
        v15 += v20;
        v19 = (unsigned __int16 *)((char *)v19 + v20);
      }
      while ( v15 < v18 );
      v11 = *a2;
    }
    v21 = v18;
    if ( v15 > v18 )
      v21 = v15;
    v22 = v11 + v21;
    v32 = v22;
    if ( v22 <= 0xFFFF )
    {
      if ( v15 >= v18 )
        goto LABEL_29;
      v23 = v30 - (_DWORD)a1;
      if ( (unsigned int)(v30 - (_DWORD)a1) <= a1[11] )
      {
LABEL_28:
        a1[8] = v30;
LABEL_29:
        *a2 = v22;
        StormHeap_CombineFreeBlocks((int)a1, a2, (int *)&v31, (char *)&v29);
        v13 = v31;
        v24 = v30;
        *a2 = v31;
        if ( v24 != a1[8] )
        {
          *(_BYTE *)(v24 + 3) &= ~0x10u;
          if ( (*(_BYTE *)(v24 + 3) & 2) != 0 )
          {
            v25 = a1[9];
            if ( v25 )
              a1[9] = v25 - 1;
          }
        }
        StormHeap_RebuildFreeList(a1);
        v14 = v29;
        goto LABEL_34;
      }
      if ( v23 <= a1[12] && StormHeap_CommitPages(a1, v23) )
      {
        LOWORD(v22) = v32;
        goto LABEL_28;
      }
    }
    return 0;
  }
  v12 = v11 - v9;
  v13 = v12 + v9;
  v14 = v12 + v10;
LABEL_34:
  v26 = *((_BYTE *)a2 + 3);
  *a2 = v13;
  *((_BYTE *)a2 + 2) = v14;
  *((_BYTE *)a2 + 3) = v26 & 0xFE | v28;
  *((_DWORD *)a2 + 1) = a1[3];
  if ( v28 )
    *(unsigned __int16 *)((char *)a2 + v13 - v14 - 2) = 4785;
  a1[6] += a4 - a3;
  return 1;
}
// 也是在处理内存块合并之类：v10[3] &= ~0x10; ...
char *__fastcall StormHeap_CombineFreeBlocks(int a1, unsigned __int16 *a2, int *a3, char *a4)
{
  int v4; // esi
  char *v6; // eax
  int v7; // ecx
  unsigned int v8; // esi
  char *result; // eax
  char *v10; // edx
  int v11; // ecx

  v4 = *a2;
  v6 = (char *)a2 + v4;
  v7 = *a3;
  v8 = v4 - *a3;
  if ( v6 == *(char **)(a1 + 32) )
  {
    result = (char *)a2 + v7;
    *(_DWORD *)(a1 + 32) = (char *)a2 + v7;
  }
  else if ( v8 < 0x10 )
  {
    v6[3] &= ~0x10u;
    result = a4;
    *a3 += v8;
    *(_DWORD *)a4 += v8;
  }
  else
  {
    v10 = (char *)a2 + v7;
    v11 = 8;
    if ( (unsigned __int16)v8 >> 5 < 8u )
      v11 = (unsigned __int16)v8 >> 5;
    *(_WORD *)v10 = v8;
    *((_WORD *)v10 + 1) = 512;
    result = *(char **)(a1 + 4 * v11 + 68);
    *((_DWORD *)v10 + 1) = result;
    *(_DWORD *)(a1 + 4 * v11 + 68) = v10;
  }
  return result;
}
// 叫了 v1 = a1[7], v2 == a1[8] 之类循环，把空闲块重新链接到 a1[v13+17]。看上去是“扫描并重建空闲链表”。
_DWORD *__fastcall StormHeap_RebuildFreeList(_DWORD *a1)
{
  unsigned __int16 *v1; // esi
  unsigned __int16 *v2; // eax
  int v3; // ebx
  unsigned int v4; // edx
  int v5; // ebx
  unsigned __int16 v6; // cx
  unsigned int v7; // edx
  int v8; // ecx
  int *v9; // edx
  _DWORD *result; // eax
  _DWORD *v11; // [esp+4h] [ebp-2Ch]
  _DWORD *v12; // [esp+8h] [ebp-28h] BYREF
  _DWORD *v13; // [esp+Ch] [ebp-24h]
  _DWORD *v14; // [esp+10h] [ebp-20h]
  _DWORD *v15; // [esp+14h] [ebp-1Ch]
  _DWORD *v16; // [esp+18h] [ebp-18h]
  _DWORD *v17; // [esp+1Ch] [ebp-14h]
  _DWORD *v18; // [esp+20h] [ebp-10h]
  _DWORD *v19; // [esp+24h] [ebp-Ch]
  _DWORD *v20; // [esp+28h] [ebp-8h]

  v11 = a1;
  v12 = a1 + 17;
  v13 = a1 + 18;
  v14 = a1 + 19;
  v15 = a1 + 20;
  v16 = a1 + 21;
  v17 = a1 + 22;
  v18 = a1 + 23;
  v19 = a1 + 24;
  v20 = a1 + 25;
  v1 = 0;
  v2 = (unsigned __int16 *)a1[7];
  if ( v2 == (unsigned __int16 *)a1[8] )
    goto LABEL_18;
  v3 = 8;
  do
  {
    if ( (*((_BYTE *)v2 + 3) & 2) == 0 )
      goto LABEL_13;
    *((_DWORD *)v2 + 1) = 0;
    if ( v1 )
    {
      v4 = *v1;
      if ( v2 == (unsigned __int16 *)((char *)v1 + v4) )
      {
        v5 = *v2;
        if ( v4 + v5 <= 0xFFFF )
        {
          v6 = v5 + *v1;
          v3 = 8;
          *v1 = v6;
          goto LABEL_13;
        }
        v3 = 8;
      }
      v7 = v4 >> 5;
      v8 = 8;
      if ( v7 < 8 )
        v8 = v7;
      v9 = (int *)&(&v12)[v8];
      *(_DWORD *)*v9 = v1;
      *v9 = (int)(v1 + 2);
    }
    v1 = v2;
LABEL_13:
    v2 = (unsigned __int16 *)((char *)v2 + *v2);
    a1 = v11;
  }
  while ( v2 != (unsigned __int16 *)v11[8] );
  if ( v1 )
  {
    if ( *v1 >> 5 < 8u )
      v3 = *v1 >> 5;
    *(&v12)[v3] = v1;
    (&v12)[v3] = v1 + 2;
  }
LABEL_18:
  *v12 = 0;
  *v13 = 0;
  *v14 = 0;
  *v15 = 0;
  *v16 = 0;
  *v17 = 0;
  *v18 = 0;
  *v19 = 0;
  result = v20;
  *v20 = 0;
  a1[9] = 0;
  return result;
}
// 里头 VirtualAlloc((char *)a1 + v4, v5, MEM_COMMIT, PAGE_READWRITE) 之类，给堆追加 commit 页面。
int __fastcall StormHeap_CommitPages(_DWORD *a1, int a2)
{
  int v3; // eax
  int v4; // ecx
  SIZE_T v5; // esi
  int v6; // edx
  unsigned int v7; // edx
  int result; // eax

  v3 = a1[10];
  v4 = a1[11];
  v5 = a2 - v4;
  v6 = (a2 - v4) & (v3 - 1);
  if ( v6 )
    v5 += v3 - v6;
  v7 = a1[12];
  if ( v4 + v5 > v7 )
    v5 = v7 - v4;
  result = (int)VirtualAlloc((char *)a1 + v4, v5, 0x1000u, 4u);
  if ( result )
  {
    a1[11] += v5;
    return 1;
  }
  return result;
}
int __fastcall sub_1502B680(_DWORD *a1, unsigned __int16 *a2, int a3, unsigned int a4)
{
  BOOL v6; // eax
  BOOL v7; // esi
  int v8; // ecx
  int v9; // eax
  int v10; // esi
  int v11; // ecx
  int v12; // eax
  char *v13; // edx
  unsigned int v14; // eax
  bool v15; // zf
  unsigned int v16; // edx
  char *v17; // edx
  int v18; // ecx
  unsigned int v19; // eax
  int result; // eax
  int v21; // [esp+Ch] [ebp-Ch]
  BOOL v22; // [esp+10h] [ebp-8h]
  char *v23; // [esp+10h] [ebp-8h]
  char v24; // [esp+17h] [ebp-1h]

  v6 = dword_15056F74 || a4 > 0xFE7B;
  v7 = dword_1505536C && !v6;
  v22 = v7;
  v8 = a4;
  if ( v6 )
    v8 = 4;
  v9 = v8 + 8 + (v7 ? 2 : 0);
  v10 = v9 + (-v9 & 7);
  v11 = -v9 & 7;
  v21 = v11;
  v24 = *((_BYTE *)a2 + 3) & 0xFE | v22;
  v12 = *a2;
  v13 = (char *)a2 + v12;
  v14 = v12 - v10;
  v15 = v13 == (char *)a1[8];
  v23 = v13;
  v16 = a4;
  if ( v15 )
  {
    a1[8] = (char *)a2 + v10;
  }
  else
  {
    if ( v14 < 0x10 )
    {
      v10 += v14;
      v23[3] &= ~0x10u;
      v11 += v14;
    }
    else
    {
      v17 = (char *)a2 + v10;
      v18 = 8;
      *(_WORD *)v17 = v14;
      v19 = (unsigned __int16)v14 >> 5;
      *((_WORD *)v17 + 1) = 512;
      if ( v19 < 8 )
        v18 = v19;
      *((_DWORD *)v17 + 1) = a1[v18 + 17];
      a1[v18 + 17] = v17;
      v11 = v21;
    }
    v16 = a4;
  }
  *a2 = v10;
  *((_BYTE *)a2 + 2) = v11;
  *((_BYTE *)a2 + 3) = v24;
  result = a1[3];
  *((_DWORD *)a2 + 1) = result;
  if ( (v24 & 1) != 0 )
  {
    result = 4785;
    *(unsigned __int16 *)((char *)a2 + v10 - v11 - 2) = 4785;
  }
  a1[6] += v16 - a3;
  return result;
}
void __fastcall sub_1502B4F0(_DWORD *a1, _DWORD *a2, unsigned __int16 *a3)
{
  size_t v3; // esi
  int v4; // eax
  _DWORD *v5; // [esp+Ch] [ebp-4h]

  v5 = a1;
  if ( (*((_BYTE *)a3 + 3) & 4) != 0 )
  {
    v3 = *(a2 - 4);
  }
  else
  {
    v4 = *((unsigned __int8 *)a3 + 2) + 8;
    if ( (*((_BYTE *)a3 + 3) & 1) != 0 )
      v4 = *((unsigned __int8 *)a3 + 2) + 10;
    v3 = *a3 - v4;
  }
  if ( dword_15056F70 && (*((_BYTE *)a3 + 3) & 4) == 0 )
  {
    memset(a2, 221, v3);
    a1 = v5;
  }
  g_TotalAllocatedMemory -= *a3;
  ++a1[15];
  StormHeap_InternalFree(a1, a3);
  sub_15035850();
}
// 这里把 size_t v3; = block size，dword_1505738C -= *a3, ++a1[15]，然后最后 sub_1502ABF0(a1, a3).
char __fastcall StormHeap_InternalFree(_DWORD *a1, unsigned __int16 *a2)
{
  char v4; // cl
  int v5; // ecx
  int *v6; // ecx
  int v7; // ebx
  void *v8; // eax
  int v9; // eax
  int v10; // edx
  int v11; // eax
  char *v12; // edx
  int v13; // ecx
  bool v14; // cf

  v4 = *((_BYTE *)a2 + 3);
  if ( (v4 & 4) != 0 )
  {
    v5 = *((_DWORD *)a2 + 2);
    if ( v5 )
    {
      v6 = (int *)(v5 - 16);
      v7 = *v6;
      v8 = (void *)((unsigned int)v6 & ~(g_VirtualMemoryPageSize - 1));
      a1[13] -= *v6;
      VirtualFree(v8, 0, 0x8000u);
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + 2);
    v7 = *a2 - v9 - 8;
    if ( (v4 & 1) != 0 )
      v7 = *a2 - v9 - 10;
  }
  --a1[5];
  a1[6] -= v7;
  v10 = *a2;
  LOBYTE(v11) = *((_BYTE *)a2 + 3) & 0x10 | 2;
  *((_BYTE *)a2 + 2) = 0;
  v12 = (char *)a2 + v10;
  *((_BYTE *)a2 + 3) = v11;
  if ( (char *)a1[8] == v12 )
  {
    *((_DWORD *)a2 + 1) = 0;
    a1[8] = a2;
  }
  else
  {
    v12[3] |= 0x10u;
    v13 = 8;
    if ( *a2 >> 5 < 8u )
      v13 = *a2 >> 5;
    v11 = a1[v13 + 17];
    *((_DWORD *)a2 + 1) = v11;
    a1[v13 + 17] = a2;
    if ( (*((_BYTE *)a2 + 3) & 0x10) != 0 || (v12[3] & 2) != 0 )
      ++a1[9];
  }
  if ( !a1[5] )
  {
    v11 = a1[7];
    a1[8] = v11;
    a1[17] = 0;
    a1[18] = 0;
    a1[19] = 0;
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
    a1[23] = 0;
    a1[24] = 0;
    a1[25] = 0;
    v14 = a1[1] < 0x80000000;
    a1[9] = 0;
    if ( v14 )
    {
      v11 = a1[2];
      dword_15057380 = (int)a1;
      dword_15055370[v11] = 1;
    }
  }
  return v11;
}
void sub_15035850()
{
  ++dword_15057728;
}