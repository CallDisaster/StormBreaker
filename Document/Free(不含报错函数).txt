int __stdcall Storm_MemFree(int a1, char *a2, int ArgList, int a4)
{
  int result; // eax
  int v5; // edi
  int v6; // esi
  int ArgLista; // [esp+10h] [ebp+10h]

  if ( g_MemorySystemInitialized )
  {
    result = Storm_CheckMemPointer(a1, 1, a2, ArgList);
    if ( result )
    {
      if ( a1 )
      {
        v5 = a1 - 8;
        if ( (*(_BYTE *)(a1 - 5) & 8) != 0 )
          v5 = *(_DWORD *)(a1 - 12);
      }
      else
      {
        v5 = 0;
      }
      v6 = *(unsigned __int16 *)(v5 + 4) << 16;
      EnterCriticalSection(&g_HeapCriticalSections + *(_DWORD *)(v6 + 8));
      ArgLista = *(_DWORD *)(v6 + 8);
      sub_1502B4F0(v6, a1, v5);
      if ( ArgLista != -1 )
        LeaveCriticalSection(&g_HeapCriticalSections + ArgLista);
      return 1;
    }
  }
  else
  {
    Storm_SetLastError(0x8510007D);
    if ( g_ErrorHandlingEnabled )
      Storm_AllocErrorHandler(0x8510007D, "SMemFree()", -1, 0, 1, 1u);
    return 0;
  }
  return result;
}
// 用来检查指针是否合法，是否带某些标志 (0x8510007C / 0x8510007A 等)；若不合法就调用Storm_AllocErrorHandler.
int __fastcall Storm_CheckMemPointer(int a1, int edx0, char *a2, int ArgList)
{
  char v5; // al

  if ( !a1 )
  {
    if ( edx0 )
    {
      Storm_SetLastError(0x85100081);
      if ( g_ErrorHandlingEnabled )
        Storm_AllocErrorHandler(0x85100081, a2, ArgList, 0, 1, 1u);
    }
    return 0;
  }
  if ( *(_WORD *)(a1 - 2) != 28525 )
  {
    if ( edx0 )
    {
      Storm_SetLastError(0x8510007C);
      if ( g_ErrorHandlingEnabled )
      {
        Storm_AllocErrorHandler(0x8510007C, a2, ArgList, 0, 1, 1u);
        return 0;
      }
    }
    return 0;
  }
  v5 = *(_BYTE *)(a1 - 5);
  if ( (v5 & 2) != 0 )
  {
    if ( !edx0 )
      return 0;
    Storm_SetLastError(0x8510007A);
    if ( !g_ErrorHandlingEnabled )
      return 0;
    Storm_AllocErrorHandler(0x8510007A, a2, ArgList, 0, 1, 1u);
    return 0;
  }
  else
  {
    if ( (v5 & 1) != 0
      && *(_WORD *)(*(unsigned __int16 *)(a1 - 8) - *(unsigned __int8 *)(a1 - 6) + a1 - 10) != 4785
      && edx0 )
    {
      Storm_MemErrorCallback(0x8510007B, (char)a2, ArgList);
    }
    return 1;
  }
}
void __fastcall sub_1502B4F0(_DWORD *a1, _DWORD *a2, unsigned __int16 *a3)
{
  size_t v3; // esi
  int v4; // eax
  _DWORD *v5; // [esp+Ch] [ebp-4h]

  v5 = a1;
  if ( (*((_BYTE *)a3 + 3) & 4) != 0 )
  {
    v3 = *(a2 - 4);
  }
  else
  {
    v4 = *((unsigned __int8 *)a3 + 2) + 8;
    if ( (*((_BYTE *)a3 + 3) & 1) != 0 )
      v4 = *((unsigned __int8 *)a3 + 2) + 10;
    v3 = *a3 - v4;
  }
  if ( dword_15056F70 && (*((_BYTE *)a3 + 3) & 4) == 0 )
  {
    memset(a2, 221, v3);
    a1 = v5;
  }
  g_TotalAllocatedMemory -= *a3;
  ++a1[15];
  StormHeap_InternalFree(a1, a3);
  sub_15035850();
}
// 这里把 size_t v3; = block size，dword_1505738C -= *a3, ++a1[15]，然后最后 sub_1502ABF0(a1, a3).
char __fastcall StormHeap_InternalFree(_DWORD *a1, unsigned __int16 *a2)
{
  char v4; // cl
  int v5; // ecx
  int *v6; // ecx
  int v7; // ebx
  void *v8; // eax
  int v9; // eax
  int v10; // edx
  int v11; // eax
  char *v12; // edx
  int v13; // ecx
  bool v14; // cf

  v4 = *((_BYTE *)a2 + 3);
  if ( (v4 & 4) != 0 )
  {
    v5 = *((_DWORD *)a2 + 2);
    if ( v5 )
    {
      v6 = (int *)(v5 - 16);
      v7 = *v6;
      v8 = (void *)((unsigned int)v6 & ~(g_VirtualMemoryPageSize - 1));
      a1[13] -= *v6;
      VirtualFree(v8, 0, 0x8000u);
    }
    else
    {
      v7 = 0;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + 2);
    v7 = *a2 - v9 - 8;
    if ( (v4 & 1) != 0 )
      v7 = *a2 - v9 - 10;
  }
  --a1[5];
  a1[6] -= v7;
  v10 = *a2;
  LOBYTE(v11) = *((_BYTE *)a2 + 3) & 0x10 | 2;
  *((_BYTE *)a2 + 2) = 0;
  v12 = (char *)a2 + v10;
  *((_BYTE *)a2 + 3) = v11;
  if ( (char *)a1[8] == v12 )
  {
    *((_DWORD *)a2 + 1) = 0;
    a1[8] = a2;
  }
  else
  {
    v12[3] |= 0x10u;
    v13 = 8;
    if ( *a2 >> 5 < 8u )
      v13 = *a2 >> 5;
    v11 = a1[v13 + 17];
    *((_DWORD *)a2 + 1) = v11;
    a1[v13 + 17] = a2;
    if ( (*((_BYTE *)a2 + 3) & 0x10) != 0 || (v12[3] & 2) != 0 )
      ++a1[9];
  }
  if ( !a1[5] )
  {
    v11 = a1[7];
    a1[8] = v11;
    a1[17] = 0;
    a1[18] = 0;
    a1[19] = 0;
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
    a1[23] = 0;
    a1[24] = 0;
    a1[25] = 0;
    v14 = a1[1] < 0x80000000;
    a1[9] = 0;
    if ( v14 )
    {
      v11 = a1[2];
      dword_15057380 = (int)a1;
      dword_15055370[v11] = 1;
    }
  }
  return v11;
}
void sub_15035850()
{
  ++dword_15057728;
}