//namespace MemPool {
//    // 内部变量
//    static void* g_mainPool = nullptr;
//    static tlsf_t g_tlsf = nullptr;
//
//    // 替换单一锁为分片锁
//    constexpr size_t LOCK_SHARDS = 32;  // 32个锁分片
//    static std::mutex g_poolMutexes[LOCK_SHARDS];
//
//    // 根据内存地址或大小选择锁
//    inline size_t get_shard_index(void* ptr = nullptr, size_t size = 0) {
//        size_t hash;
//        if (ptr) {
//            hash = reinterpret_cast<uintptr_t>(ptr) / 16;  // 对齐到16字节
//        }
//        else {
//            hash = size / 16;  // 使用请求大小
//        }
//        return hash % LOCK_SHARDS;
//    }
//
//    // 加锁辅助函数
//    class MultiLockGuard {
//    private:
//        std::vector<size_t> indices;
//    public:
//        // 锁定一个分片
//        MultiLockGuard(size_t index) {
//            g_poolMutexes[index].lock();
//            indices.push_back(index);
//        }
//
//        // 锁定所有分片
//        MultiLockGuard() {
//            for (size_t i = 0; i < LOCK_SHARDS; ++i) {
//                g_poolMutexes[i].lock();
//                indices.push_back(i);
//            }
//        }
//
//        // 锁定两个分片（防止死锁）
//        MultiLockGuard(size_t index1, size_t index2) {
//            if (index1 != index2) {
//                // 按顺序锁定，避免死锁
//                if (index1 < index2) {
//                    g_poolMutexes[index1].lock();
//                    indices.push_back(index1);
//                    g_poolMutexes[index2].lock();
//                    indices.push_back(index2);
//                }
//                else {
//                    g_poolMutexes[index2].lock();
//                    indices.push_back(index2);
//                    g_poolMutexes[index1].lock();
//                    indices.push_back(index1);
//                }
//            }
//            else {
//                // 相同的分片只锁一次
//                g_poolMutexes[index1].lock();
//                indices.push_back(index1);
//            }
//        }
//
//        ~MultiLockGuard() {
//            // 反向顺序解锁
//            for (auto it = indices.rbegin(); it != indices.rend(); ++it) {
//                g_poolMutexes[*it].unlock();
//            }
//        }
//    };
//
//    static std::atomic<bool> g_inTLSFOperation{ false };
//
//    // 不同类型的内存操作
//    enum TLSFOpType {
//        OpAlloc = 0,
//        OpFree = 1,
//        OpRealloc = 2,
//        OpExtend = 3,
//        OpStat = 4,
//        OpMax = 5  // 用于定义位图大小
//    };
//
//    // 用位图表示活跃操作
//    static std::atomic<uint32_t> g_activeOps{ 0 };
//
//    // 设置/清除操作状态的辅助函数
//    inline bool TrySetOpActive(TLSFOpType opType) {
//        uint32_t expected = g_activeOps.load(std::memory_order_relaxed);
//        uint32_t desired;
//        bool retry_op = false;
//        do {
//            // 检查此类型操作是否已活跃
//            retry_op = (expected & (1u << opType));
//            if (retry_op) break;
//
//            // 设置对应位
//            desired = expected | (1u << opType);
//        } while (!g_activeOps.compare_exchange_weak(expected, desired,
//            std::memory_order_acquire, std::memory_order_relaxed));
//
//        return !retry_op;  // 如果没有重试，则成功
//    }
//
//    inline void SetOpInactive(TLSFOpType opType) {
//        g_activeOps.fetch_and(~(1u << opType), std::memory_order_release);
//    }
//
//    // 检查是否有任何活跃操作
//    inline bool AnyOpActive() {
//        return g_activeOps.load(std::memory_order_acquire) != 0;
//    }
//
//    // 检查特定类型的操作是否活跃
//    inline bool IsOpActive(TLSFOpType opType) {
//        return (g_activeOps.load(std::memory_order_acquire) & (1u << opType)) != 0;
//    }
//
//    // 线程本地缓存结构
//    struct ThreadCache {
//        // 存储不同大小的块缓存
//        struct SizeClass {
//            std::vector<void*> blocks;  // 空闲块列表
//            size_t blockSize;           // 该大小类的块大小
//            size_t maxCount;            // 最大缓存数量
//        };
//
//        // 常用大小的缓存
//        static constexpr size_t NUM_SIZE_CLASSES = 8;
//        static constexpr size_t SIZE_CLASSES[NUM_SIZE_CLASSES] = {
//            16, 32, 64, 128, 256, 512, 1024, 2048
//        };
//
//        SizeClass sizeClasses[NUM_SIZE_CLASSES];
//
//        // 初始化缓存
//        ThreadCache() {
//            for (size_t i = 0; i < NUM_SIZE_CLASSES; i++) {
//                sizeClasses[i].blockSize = SIZE_CLASSES[i];
//                // 为小块设置更多缓存数量
//                sizeClasses[i].maxCount = 32 / (i + 1); // 小块缓存更多
//            }
//        }
//
//        // 释放所有缓存的块
//        ~ThreadCache() {
//            // 添加安全释放标记
//            const bool inUnsafePeriod = g_cleanAllInProgress || g_insideUnsafePeriod.load();
//
//            for (auto& sc : sizeClasses) {
//                for (void* block : sc.blocks) {
//                    if (block) {
//                        try {
//                            // 不直接释放到TLSF池，而是执行两步检查：
//                            if (inUnsafePeriod) {
//                                // 不安全期间：放入延迟队列
//                                g_MemSafety.EnqueueDeferredFree(block, sc.blockSize);
//                            }
//                            else if (IsFromPool(block)) {
//                                // 安全期间：确认是我们的块才释放
//                                tlsf_free(g_tlsf, block);
//                            }
//                            // 否则忽略此块
//                        }
//                        catch (...) {
//                            // 捕获异常但继续处理其他块
//                            LogMessage("[ThreadCache] 释放缓存块异常: %p", block);
//                        }
//                    }
//                }
//                sc.blocks.clear();
//            }
//        }
//    };
//
//    // 存储所有线程缓存的全局列表
//    static std::mutex g_cachesMutex;
//    static std::vector<ThreadCache*> g_allCaches;
//
//    // 线程本地存储
//    thread_local ThreadCache* tls_cache = nullptr;
//
//    // 在创建线程缓存时注册
//    void RegisterThreadCache(ThreadCache* cache) {
//        std::lock_guard<std::mutex> lock(g_cachesMutex);
//        g_allCaches.push_back(cache);
//    }
//
//    // 在销毁线程缓存时注销
//    void UnregisterThreadCache(ThreadCache* cache) {
//        std::lock_guard<std::mutex> lock(g_cachesMutex);
//        auto it = std::find(g_allCaches.begin(), g_allCaches.end(), cache);
//        if (it != g_allCaches.end()) {
//            g_allCaches.erase(it);
//        }
//    }
//
//    // 清理所有线程缓存
//    void CleanupAllThreadCaches() {
//        std::lock_guard<std::mutex> lock(g_cachesMutex);
//        for (auto cache : g_allCaches) {
//            delete cache;
//        }
//        g_allCaches.clear();
//    }
//
//    // 初始化线程缓存
//    void InitThreadCache() {
//        // 如果在不安全期，不创建缓存
//        if (g_cleanAllInProgress || g_insideUnsafePeriod.load()) {
//            return;
//        }
//
//        if (!tls_cache) {
//            tls_cache = new ThreadCache();
//
//            // 使用写锁注册缓存
//            std::lock_guard<std::mutex> lock(g_cachesMutex);
//            g_allCaches.push_back(tls_cache);
//        }
//    }
//
//    // 清理线程缓存
//    void CleanupThreadCache() {
//        // 先从全局列表移除，再清理
//        ThreadCache* localCache = tls_cache;
//        if (localCache) {
//            {
//                std::lock_guard<std::mutex> lock(g_cachesMutex);
//                auto it = std::find(g_allCaches.begin(), g_allCaches.end(), localCache);
//                if (it != g_allCaches.end()) {
//                    g_allCaches.erase(it);
//                }
//            }
//
//            // 设置线程局部变量为null，防止重复删除
//            tls_cache = nullptr;
//
//            // 安全删除，可能的异常在析构函数内部处理
//            delete localCache;
//        }
//    }
//
//    // 从线程缓存分配
//    void* AllocateFromCache(size_t size) {
//        if (!tls_cache) {
//            InitThreadCache();
//        }
//
//        // 查找适合的大小类
//        for (auto& sc : tls_cache->sizeClasses) {
//            if (size <= sc.blockSize && !sc.blocks.empty()) {
//                void* block = sc.blocks.back();
//                sc.blocks.pop_back();
//                return block;
//            }
//        }
//
//        return nullptr; // 缓存中没有合适大小的块
//    }
//
//    // 尝试放入缓存
//    bool TryReturnToCache(void* ptr, size_t size) {
//        if (!tls_cache) {
//            return false;
//        }
//
//        // 查找适合的大小类
//        for (auto& sc : tls_cache->sizeClasses) {
//            if (size == sc.blockSize && sc.blocks.size() < sc.maxCount) {
//                sc.blocks.push_back(ptr);
//                return true;
//            }
//        }
//
//        return false; // 缓存已满或大小不匹配
//    }
//
//
//    // 额外内存池结构
//    struct ExtraPool {
//        void* memory;
//        size_t size;
//    };
//    static std::vector<ExtraPool> g_extraPools;
//
//    // 检查指针是否在某个池范围内
//    bool IsPointerInPool(void* ptr, void* poolStart, size_t poolSize) {
//        uintptr_t ptrAddr = reinterpret_cast<uintptr_t>(ptr);
//        uintptr_t poolAddr = reinterpret_cast<uintptr_t>(poolStart);
//        return (ptrAddr >= poolAddr && ptrAddr < poolAddr + poolSize);
//    }
//
//    // 初始化内存池
//    bool Initialize(size_t initialSize) {
//        // 对所有分片加锁
//        std::vector<std::unique_lock<std::mutex>> locks;
//        for (size_t i = 0; i < LOCK_SHARDS; i++) {
//            locks.emplace_back(g_poolMutexes[i]);
//        }
//
//        if (g_mainPool) {
//            LogMessage("[MemPool] 已初始化");
//            return true;
//        }
//
//        // 分配主内存池
//        g_mainPool = VirtualAlloc(NULL, initialSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
//        if (!g_mainPool) {
//            LogMessage("[MemPool] 无法分配主内存池，大小: %zu", initialSize);
//            return false;
//        }
//
//        // 初始化TLSF
//        g_tlsf = tlsf_create_with_pool(g_mainPool, initialSize);
//        if (!g_tlsf) {
//            LogMessage("[MemPool] 无法创建TLSF实例");
//            VirtualFree(g_mainPool, 0, MEM_RELEASE);
//            g_mainPool = nullptr;
//            return false;
//        }
//
//        // 初始化线程缓存
//        InitThreadCache();
//
//        LogMessage("[MemPool] 已初始化，大小: %zu 字节，地址: %p", initialSize, g_mainPool);
//        return true;
//    }
//
//    void DisableActualFree() {
//        // 获取所有分片锁，确保全局设置的一致性
//        std::vector<std::unique_lock<std::mutex>> locks;
//        for (size_t i = 0; i < LOCK_SHARDS; i++) {
//            locks.emplace_back(g_poolMutexes[i]);
//        }
//
//        g_disableActualFree = true;
//        LogMessage("[MemPool] 已禁用实际内存释放");
//    }
//
//    // 设置内存不释放标志的函数
//    void DisableMemoryReleasing() {
//        g_disableMemoryReleasing.store(true);
//        LogMessage("[MemPool] 已禁用内存释放，所有内存将保留到进程结束");
//    }
//
//    // 清理资源
//    void Shutdown() {
//        std::vector<std::unique_lock<std::mutex>> locks;
//
//        // 仅清理数据结构引用，不释放实际内存
//        if (g_disableMemoryReleasing.load()) {
//            LogMessage("[MemPool] 保留所有内存块，仅清理管理数据");
//
//            // 仅清理引用，不释放内存
//            g_tlsf = nullptr;
//            g_extraPools.clear();
//            g_mainPool = nullptr;
//            return;
//        }
//
//        // 原有释放逻辑（只在未禁用时执行）
//        if (g_tlsf) {
//            g_tlsf = nullptr;
//        }
//
//        for (const auto& pool : g_extraPools) {
//            if (pool.memory) {
//                VirtualFree(pool.memory, 0, MEM_RELEASE);
//            }
//        }
//        g_extraPools.clear();
//
//        if (g_mainPool) {
//            VirtualFree(g_mainPool, 0, MEM_RELEASE);
//            g_mainPool = nullptr;
//        }
//
//        // 清理线程缓存
//        CleanupThreadCache();
//
//        LogMessage("[MemPool] 关闭并释放内存完成");
//    }
//
//    // 添加额外内存池
//    bool AddExtraPool(size_t size, bool callerHasLock = false) {
//        if (!callerHasLock && g_inTLSFOperation.exchange(true)) {
//            LogMessage("[MemPool] AddExtraPool: TLSF操作正在进行，跳过");
//            g_inTLSFOperation = false;
//            return false;
//        }
//
//        // 如果调用者没有持有锁，我们需要获取锁
//        std::unique_ptr<MultiLockGuard> lockGuard;
//        if (!callerHasLock) {
//            lockGuard = std::make_unique<MultiLockGuard>();  // 锁定所有分片
//        }
//
//        if (!g_tlsf) {
//            LogMessage("[MemPool] TLSF未初始化");
//            if (!callerHasLock) g_inTLSFOperation = false;
//            return false;
//        }
//
//        // 分配新池
//        void* newPool = VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
//        if (!newPool) {
//            LogMessage("[MemPool] 无法分配额外内存池，大小: %zu", size);
//            if (!callerHasLock) g_inTLSFOperation = false;
//            return false;
//        }
//
//        // 添加到TLSF
//        pool_t pool = tlsf_add_pool(g_tlsf, newPool, size);
//        if (!pool) {
//            LogMessage("[MemPool] 无法添加内存池到TLSF");
//            VirtualFree(newPool, 0, MEM_RELEASE);
//            if (!callerHasLock) g_inTLSFOperation = false;
//            return false;
//        }
//
//        // 记录池信息
//        ExtraPool extraPool = { newPool, size };
//        g_extraPools.push_back(extraPool);
//
//        LogMessage("[MemPool] 添加额外内存池，大小: %zu，地址: %p", size, newPool);
//        if (!callerHasLock) g_inTLSFOperation = false;
//        return true;
//    }
//
//    // 分配内存 - 保护版
//    void* AllocateSafe(size_t size) {
//        // 在不安全期间直接使用系统分配
//        if (g_cleanAllInProgress || g_insideUnsafePeriod.load()) {
//            void* sysPtr = VirtualAlloc(NULL, size + sizeof(StormAllocHeader),
//                MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
//            if (!sysPtr) {
//                LogMessage("[MemPool] 不安全期间系统内存分配失败: %zu", size);
//                return nullptr;
//            }
//
//            void* userPtr = static_cast<char*>(sysPtr) + sizeof(StormAllocHeader);
//            SetupCompatibleHeader(userPtr, size);
//            LogMessage("[MemPool] 不安全期间使用系统内存: %p, 大小: %zu", userPtr, size);
//            return userPtr;
//        }
//
//        // 先尝试从线程缓存分配
//        void* ptr = AllocateFromCache(size);
//        if (ptr) {
//            return ptr;
//        }
//
//        // 尝试设置Alloc操作为活跃
//        if (!TrySetOpActive(TLSFOpType::OpAlloc)) {
//            LogMessage("[MemPool] Allocate: TLSF分配操作正在进行，回退到系统分配");
//
//            // 使用系统分配作为备选
//            void* sysPtr = VirtualAlloc(NULL, size + sizeof(StormAllocHeader),
//                MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
//            if (!sysPtr) return nullptr;
//
//            void* userPtr = static_cast<char*>(sysPtr) + sizeof(StormAllocHeader);
//            SetupCompatibleHeader(userPtr, size);
//            return userPtr;
//        }
//
//        // 成功设置活跃标记，进行正常分配
//        ptr = Allocate(size);
//
//        // 清除活跃标记
//        SetOpInactive(TLSFOpType::OpAlloc);
//        return ptr;
//    }
//
//
//    // 分配内存
//    void* Allocate(size_t size) {
//        if (!g_tlsf) {
//            // 懒初始化
//            Initialize(TLSF_MAIN_POOL_SIZE);
//            if (!g_tlsf) return nullptr;
//        }
//
//        // 使用分片锁，根据大小选择锁
//        size_t lockIndex = get_shard_index(nullptr, size);
//        g_poolMutexes[lockIndex].lock();
//        std::vector<size_t> lockedIndices = { lockIndex };
//
//        void* ptr = tlsf_malloc(g_tlsf, size);
//        if (!ptr) {
//            // 尝试扩展池
//            size_t extraSize = size < (4 * 1024 * 1024) ? (4 * 1024 * 1024) : size * 2;
//            LogMessage("[MemPool] 分配失败，大小: %zu，扩展内存池: %zu 字节",
//                size, extraSize);
//
//            // 扩展池，传入当前已锁定的索引
//            if (AddExtraPool(extraSize, true)) {
//                ptr = tlsf_malloc(g_tlsf, size);
//            }
//        }
//
//        g_poolMutexes[lockIndex].unlock();
//        return ptr;
//    }
//
//    // 释放内存 - 保护版
//    void FreeSafe(void* ptr) {
//        if (!ptr) return;
//
//        if (g_cleanAllInProgress || g_insideUnsafePeriod.load()) {
//            // 在不安全期直接入队，不经过异步释放器
//            g_MemSafety.EnqueueDeferredFree(ptr, GetBlockSize(ptr));
//            return;
//        }
//
//        // 直接安全释放
//        Free(ptr);
//    }
//
//    // 释放内存
//    void Free(void* ptr) {
//        if (!g_tlsf || !ptr) return;
//
//        // 避免释放永久块
//        if (IsPermanentBlock(ptr)) {
//            LogMessage("[MemPool] 尝试释放永久块: %p，已忽略", ptr);
//            return;
//        }
//
//        // 使用基于指针地址的分片锁
//        size_t lockIndex = get_shard_index(ptr);
//        MultiLockGuard lock(lockIndex);
//
//        // 确保指针来自我们的池
//        if (IsFromPool(ptr)) {
//            try {
//                tlsf_free(g_tlsf, ptr);
//            }
//            catch (...) {
//                LogMessage("[MemPool] 释放内存时异常: %p", ptr);
//            }
//        }
//        else {
//            // 可能是系统分配的后备内存
//            try {
//                StormAllocHeader* header = reinterpret_cast<StormAllocHeader*>(
//                    static_cast<char*>(ptr) - sizeof(StormAllocHeader));
//
//                if (header->Magic == STORM_MAGIC && header->HeapPtr == SPECIAL_MARKER) {
//                    void* basePtr = static_cast<char*>(ptr) - sizeof(StormAllocHeader);
//                    VirtualFree(basePtr, 0, MEM_RELEASE);
//                    return;
//                }
//            }
//            catch (...) {}
//
//            LogMessage("[MemPool] 警告: 尝试释放非内存池指针: %p", ptr);
//        }
//    }
//
//    // 重新分配内存 - 保护版
//    void* ReallocSafe(void* oldPtr, size_t newSize) {
//        if (!oldPtr) return AllocateSafe(newSize);
//        if (newSize == 0) {
//            FreeSafe(oldPtr);
//            return nullptr;
//        }
//
//        if (g_cleanAllInProgress || g_insideUnsafePeriod.load()) {
//            // 在不安全期间，采用分配+复制+不释放的策略
//            void* newPtr = AllocateSafe(newSize);
//            if (!newPtr) return nullptr;
//
//            // 尝试复制数据
//            size_t oldSize = 0;
//            try {
//                StormAllocHeader* oldHeader = reinterpret_cast<StormAllocHeader*>(
//                    static_cast<char*>(oldPtr) - sizeof(StormAllocHeader));
//
//                if (oldHeader->Magic == STORM_MAGIC) {
//                    oldSize = oldHeader->Size;
//                }
//            }
//            catch (...) {
//                oldSize = newSize; // 无法确定大小，假设相同
//            }
//
//            size_t copySize = min(oldSize, newSize);
//            try {
//                memcpy(newPtr, oldPtr, copySize);
//            }
//            catch (...) {
//                LogMessage("[MemPool] 不安全期间复制数据失败");
//                FreeSafe(newPtr);
//                return nullptr;
//            }
//
//            // 不释放旧指针
//            return newPtr;
//        }
//
//        // 尝试设置Realloc操作为活跃
//        if (!TrySetOpActive(TLSFOpType::OpRealloc)) {
//            LogMessage("[MemPool] Realloc: TLSF重分配操作正在进行，使用备选策略");
//
//            // 使用分配+复制+释放的备选策略
//            void* newPtr = AllocateSafe(newSize);
//            if (!newPtr) return nullptr;
//
//            // 尝试复制数据
//            try {
//                StormAllocHeader* oldHeader = reinterpret_cast<StormAllocHeader*>(
//                    static_cast<char*>(oldPtr) - sizeof(StormAllocHeader));
//                size_t copySize = min(oldHeader->Size, newSize);
//                memcpy(newPtr, oldPtr, copySize);
//            }
//            catch (...) {
//                // 复制失败，保守地尝试复制较小的块
//                try {
//                    memcpy(newPtr, oldPtr, min(newSize, (size_t)1024));
//                }
//                catch (...) {
//                    LogMessage("[MemPool] 无法复制内存数据");
//                }
//            }
//
//            // 尝试释放旧指针
//            FreeSafe(oldPtr);
//            return newPtr;
//        }
//
//        // 成功设置活跃标记，进行正常重分配
//        void* ptr = Realloc(oldPtr, newSize);
//
//        // 清除活跃标记
//        SetOpInactive(TLSFOpType::OpRealloc);
//        return ptr;
//    }
//
//    // 重新分配内存
//    void* Realloc(void* oldPtr, size_t newSize) {
//        if (!g_tlsf) return nullptr;
//        if (!oldPtr) return Allocate(newSize);
//        if (newSize == 0) {
//            Free(oldPtr);
//            return nullptr;
//        }
//
//        // 使用两个锁
//        size_t oldLockIndex = get_shard_index(oldPtr);
//        size_t newLockIndex = get_shard_index(nullptr, newSize);
//        MultiLockGuard lock(oldLockIndex, newLockIndex);
//
//        // 确保旧指针来自我们的池
//        if (!IsFromPool(oldPtr)) {
//            LogMessage("[MemPool] 警告: 尝试重新分配非内存池指针: %p", oldPtr);
//            return nullptr;
//        }
//
//        void* newPtr = tlsf_realloc(g_tlsf, oldPtr, newSize);
//        if (!newPtr) {
//            // 尝试扩展池
//            size_t extraSize = newSize < (4 * 1024 * 1024) ? (4 * 1024 * 1024) : newSize * 2;
//            LogMessage("[MemPool] 重新分配失败，大小: %zu，扩展内存池: %zu 字节",
//                newSize, extraSize);
//
//            // 扩展池需要所有锁
//            // 先解锁当前锁，再获取所有锁
//            if (oldLockIndex != newLockIndex) {
//                g_poolMutexes[oldLockIndex].unlock();
//                g_poolMutexes[newLockIndex].unlock();
//            }
//            else {
//                g_poolMutexes[oldLockIndex].unlock();
//            }
//
//            {
//                MultiLockGuard allLocks;
//                bool poolAdded = AddExtraPool(extraSize, true);  // 传入true表示调用者已持有锁
//                if (poolAdded) {
//                    newPtr = tlsf_realloc(g_tlsf, oldPtr, newSize);
//                }
//            }
//
//            // 重新锁定
//            if (oldLockIndex != newLockIndex) {
//                g_poolMutexes[oldLockIndex].lock();
//                g_poolMutexes[newLockIndex].lock();
//            }
//            else {
//                g_poolMutexes[oldLockIndex].lock();
//            }
//        }
//
//        return newPtr;
//    }
//
//    // 检查内存池状态
//    struct PoolUsageStats {
//        size_t used = 0;
//        size_t total = 0;
//    };
//
//    static void GatherUsageCallback(void* /*ptr*/, size_t size, int used, void* user) {
//        PoolUsageStats* stats = static_cast<PoolUsageStats*>(user);
//        stats->total += size;
//        if (used) stats->used += size;
//    }
//
//    // 检查指针是否来自我们的池
//    bool IsFromPool(void* ptr) {
//        if (!ptr) return false;
//
//        // 检查主池
//        if (IsPointerInPool(ptr, g_mainPool, TLSF_MAIN_POOL_SIZE)) {
//            return true;
//        }
//
//        // 检查额外池
//        for (const auto& pool : g_extraPools) {
//            if (IsPointerInPool(ptr, pool.memory, pool.size)) {
//                return true;
//            }
//        }
//
//        return false;
//    }
//
//    // 获取已使用大小
//    size_t GetUsedSize() {
//        if (!g_tlsf) return 0;
//
//        if (g_inTLSFOperation.exchange(true)) {
//            g_inTLSFOperation = false;
//            return 0; // 正在进行TLSF操作时返回0
//        }
//
//        // 不需要锁定特定分片，使用一个临时锁
//        std::mutex tempMutex;
//        std::lock_guard<std::mutex> lock(tempMutex);
//
//        PoolUsageStats stats;
//
//        // 检查主池
//        pool_t mainPool = tlsf_get_pool(g_tlsf);
//        tlsf_walk_pool(mainPool, GatherUsageCallback, &stats);
//
//        // 检查额外池
//        for (const auto& pool : g_extraPools) {
//            PoolUsageStats poolStats;
//            tlsf_walk_pool(pool.memory, GatherUsageCallback, &poolStats);
//            stats.used += poolStats.used;
//            stats.total += poolStats.total;
//        }
//
//        g_inTLSFOperation = false;
//        return stats.used;
//    }
//
//    // 获取总大小
//    size_t GetTotalSize() {
//        if (!g_tlsf) return 0;
//
//        if (g_inTLSFOperation.exchange(true)) {
//            g_inTLSFOperation = false;
//            return 0; // 正在进行TLSF操作时返回0
//        }
//
//        // 不需要锁定特定分片，使用一个临时锁
//        std::mutex tempMutex;
//        std::lock_guard<std::mutex> lock(tempMutex);
//
//        size_t total = TLSF_MAIN_POOL_SIZE;
//        for (const auto& pool : g_extraPools) {
//            total += pool.size;
//        }
//
//        g_inTLSFOperation = false;
//        return total;
//    }
//
//
//    // 打印统计信息
//    void PrintStats() {
//        if (!g_tlsf) {
//            LogMessage("[MemPool] 未初始化");
//            return;
//        }
//
//        if (g_inTLSFOperation.exchange(true)) {
//            LogMessage("[MemPool] PrintStats: TLSF操作正在进行，跳过");
//            g_inTLSFOperation = false;
//            return;
//        }
//
//        // 获取所有分片锁，因为我们需要一致的视图
//        std::vector<std::unique_lock<std::mutex>> locks;
//        for (size_t i = 0; i < LOCK_SHARDS; i++) {
//            locks.emplace_back(g_poolMutexes[i]);
//        }
//
//        LogMessage("[MemPool] === 内存池统计 ===");
//
//        // 主池
//        pool_t mainPool = tlsf_get_pool(g_tlsf);
//        PoolUsageStats mainStats;
//        tlsf_walk_pool(mainPool, GatherUsageCallback, &mainStats);
//
//        LogMessage("[MemPool] 主池: %zu KB已用 / %zu KB总计 (%.1f%%)",
//            mainStats.used / 1024, mainStats.total / 1024,
//            mainStats.total > 0 ? (mainStats.used * 100.0 / mainStats.total) : 0);
//
//        // 额外池
//        size_t totalExtra = 0;
//        size_t usedExtra = 0;
//
//        for (size_t i = 0; i < g_extraPools.size(); i++) {
//            const auto& pool = g_extraPools[i];
//            PoolUsageStats stats;
//            tlsf_walk_pool(pool.memory, GatherUsageCallback, &stats);
//
//            LogMessage("[MemPool] 额外池 #%zu: %zu KB已用 / %zu KB总计 (%.1f%%)",
//                i + 1, stats.used / 1024, stats.total / 1024,
//                stats.total > 0 ? (stats.used * 100.0 / stats.total) : 0);
//
//            totalExtra += pool.size;
//            usedExtra += stats.used;
//        }
//
//        LogMessage("[MemPool] 额外池: %zu 个, %zu KB总计",
//            g_extraPools.size(), totalExtra / 1024);
//
//        // 总计
//        size_t totalSize = TLSF_MAIN_POOL_SIZE + totalExtra;
//        size_t totalUsed = mainStats.used + usedExtra;
//
//        LogMessage("[MemPool] 总计: %zu KB已用 / %zu KB已分配 (%.1f%%)",
//            totalUsed / 1024, totalSize / 1024,
//            totalSize > 0 ? (totalUsed * 100.0 / totalSize) : 0);
//
//        g_inTLSFOperation = false;
//    }
//
//    // 检查并释放空闲的扩展池
//    void CheckAndFreeUnusedPools() {
//        if (!g_tlsf) return;
//
//        if (g_cleanAllInProgress || g_insideUnsafePeriod.load()) {
//            // 在不安全期间不执行此操作
//            return;
//        }
//
//        if (g_inTLSFOperation.exchange(true)) {
//            LogMessage("[MemPool] CheckFreeUnusedPools: TLSF操作正在进行，跳过");
//            g_inTLSFOperation = false;
//            return;
//        }
//
//        // 获取所有分片锁，因为我们需要完全控制所有内存池
//        std::vector<std::unique_lock<std::mutex>> locks;
//        for (size_t i = 0; i < LOCK_SHARDS; i++) {
//            locks.emplace_back(g_poolMutexes[i]);
//        }
//
//        bool poolsFreed = false;
//
//        // 从后向前扫描，释放完全空闲的扩展池
//        for (auto it = g_extraPools.rbegin(); it != g_extraPools.rend(); ) {
//            PoolUsageStats stats;
//            tlsf_walk_pool(it->memory, GatherUsageCallback, &stats);
//
//            if (stats.used == 0) {
//                LogMessage("[MemPool] 释放未使用的额外池: %p (大小: %zu 字节)",
//                    it->memory, it->size);
//
//                tlsf_remove_pool(g_tlsf, it->memory);
//                VirtualFree(it->memory, 0, MEM_RELEASE);
//
//                auto normalIt = std::next(it).base();
//                normalIt = g_extraPools.erase(normalIt);
//                it = std::reverse_iterator<decltype(normalIt)>(normalIt);
//
//                poolsFreed = true;
//            }
//            else {
//                ++it;
//            }
//        }
//
//        if (poolsFreed) {
//            LogMessage("[MemPool] 清理后: 剩余%zu个额外池", g_extraPools.size());
//        }
//
//        g_inTLSFOperation = false;
//    }
//
//    // 创建稳定化块 - 新增函数
//    void* CreateStabilizingBlock(size_t size, const char* purpose) {
//        if (g_inTLSFOperation.exchange(true)) {
//            LogMessage("[MemPool] CreateStabilizingBlock: TLSF操作正在进行，跳过");
//            g_inTLSFOperation = false;
//            return nullptr;
//        }
//
//        // 使用系统分配确保稳定性
//        void* rawPtr = VirtualAlloc(NULL, size + sizeof(StormAllocHeader),
//            MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
//        if (!rawPtr) {
//            LogMessage("[MemPool] 无法分配稳定化块: %zu", size);
//            g_inTLSFOperation = false;
//            return nullptr;
//        }
//
//        void* userPtr = static_cast<char*>(rawPtr) + sizeof(StormAllocHeader);
//        SetupCompatibleHeader(userPtr, size);
//
//        LogMessage("[MemPool] 创建稳定化块: %p (大小: %zu, 用途: %s)",
//            userPtr, size, purpose ? purpose : "未知");
//
//        g_inTLSFOperation = false;
//        return userPtr;
//    }
//}
